{"version":3,"file":"index.production.js","sources":["../../../table-core/build/lib/index.mjs","../../src/index.tsx"],"sourcesContent":["/**\n   * table-core\n   *\n   * Copyright (c) TanStack\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE.md file in the root directory of this source tree.\n   *\n   * @license MIT\n   */\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? {\n        ...column,\n        accessorFn: accessor\n      } : {\n        ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\n\n// Is this type a tuple?\n\n// If this type is a tuple, what indices are allowed?\n\n///\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {\n  //\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction isNumberArray(d) {\n  return Array.isArray(d) && d.every(val => typeof val === 'number');\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return depArgs => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps(depArgs);\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null || opts.onChange == null || opts.onChange(result);\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n        const pad = (str, num) => {\n          str = String(str);\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n          return str;\n        };\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n      }\n    }\n    return result;\n  };\n}\nfunction getMemoOptions(tableOptions, debugLevel, key, onChange) {\n  return {\n    debug: () => {\n      var _tableOptions$debugAl;\n      return (_tableOptions$debugAl = tableOptions == null ? void 0 : tableOptions.debugAll) != null ? _tableOptions$debugAl : tableOptions[debugLevel];\n    },\n    key: process.env.NODE_ENV === 'development' && key,\n    onChange\n  };\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), getMemoOptions(table.options, 'debugCells', 'cell.getContext'))\n  };\n  table._features.forEach(feature => {\n    feature.createCell == null || feature.createCell(cell, column, row, table);\n  }, {});\n  return cell;\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          var _result;\n          result = (_result = result) == null ? void 0 : _result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getFlatColumns')),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getLeafColumns'))\n  };\n  for (const feature of table._features) {\n    feature.createColumn == null || feature.createColumn(column, table);\n  }\n\n  // Yes, we have to convert table to unknown, because we know more than the compiler here.\n  return column;\n}\n\nconst debug = 'debugHeaders';\n//\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n        leafHeaders.push(h);\n      };\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n  table._features.forEach(feature => {\n    feature.createHeader == null || feature.createHeader(header, table);\n  });\n  return header;\n}\nconst Headers = {\n  createTable: table => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      var _left$map$filter, _right$map$filter;\n      const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n      const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n      const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n      return headerGroups;\n    }, getMemoOptions(table.options, debug, 'getHeaderGroups'));\n    table.getCenterHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n    }, getMemoOptions(table.options, debug, 'getCenterHeaderGroups'));\n    table.getLeftHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n      var _left$map$filter2;\n      const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n    }, getMemoOptions(table.options, debug, 'getLeftHeaderGroups'));\n    table.getRightHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n      var _right$map$filter2;\n      const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n    }, getMemoOptions(table.options, debug, 'getRightHeaderGroups'));\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getFooterGroups'));\n    table.getLeftFooterGroups = memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getLeftFooterGroups'));\n    table.getCenterFooterGroups = memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getCenterFooterGroups'));\n    table.getRightFooterGroups = memo(() => [table.getRightHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getRightFooterGroups'));\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return headerGroups.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getFlatHeaders'));\n    table.getLeftFlatHeaders = memo(() => [table.getLeftHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getLeftFlatHeaders'));\n    table.getCenterFlatHeaders = memo(() => [table.getCenterHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getCenterFlatHeaders'));\n    table.getRightFlatHeaders = memo(() => [table.getRightHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getRightFlatHeaders'));\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders;\n        return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getCenterLeafHeaders'));\n    table.getLeftLeafHeaders = memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders2;\n        return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getLeftLeafHeaders'));\n    table.getRightLeafHeaders = memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders3;\n        return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getRightLeafHeaders'));\n    table.getLeafHeaders = memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n      var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n      return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n        return header.getLeafHeaders();\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getLeafHeaders'));\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0;\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    };\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders = [];\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        });\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup);\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header);\n      }\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse();\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => row.parentId ? table.getRow(row.parentId, true) : undefined,\n    getParentRows: () => {\n      let parentRows = [];\n      let currentRow = row;\n      while (true) {\n        const parentRow = currentRow.getParentRow();\n        if (!parentRow) break;\n        parentRows.push(parentRow);\n        currentRow = parentRow;\n      }\n      return parentRows.reverse();\n    },\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCells')),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCellsByColumnId'))\n  };\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    feature == null || feature.createRow == null || feature.createRow(row, table);\n  }\n  return row;\n};\n\n//\n\nconst ColumnFaceting = {\n  createColumn: (column, table) => {\n    column._getFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id);\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return column._getFacetedRowModel();\n    };\n    column._getFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id);\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map();\n      }\n      return column._getFacetedUniqueValues();\n    };\n    column._getFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id);\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined;\n      }\n      return column._getFacetedMinMaxValues();\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  var _row$getValue;\n  const search = filterValue.toLowerCase();\n  return Boolean((_row$getValue = row.getValue(columnId)) == null || (_row$getValue = _row$getValue.toString()) == null || (_row$getValue = _row$getValue.toLowerCase()) == null ? void 0 : _row$getValue.includes(search));\n};\nincludesString.autoRemove = val => testFalsey(val);\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2;\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null || (_row$getValue2 = _row$getValue2.toString()) == null ? void 0 : _row$getValue2.includes(filterValue));\n};\nincludesStringSensitive.autoRemove = val => testFalsey(val);\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3;\n  return ((_row$getValue3 = row.getValue(columnId)) == null || (_row$getValue3 = _row$getValue3.toString()) == null ? void 0 : _row$getValue3.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());\n};\nequalsString.autoRemove = val => testFalsey(val);\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\narrIncludes.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\nequals.autoRemove = val => testFalsey(val);\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\nweakEquals.autoRemove = val => testFalsey(val);\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n  return [min, max];\n};\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n\n// Export\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n// Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\n\nconst ColumnFiltering = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return filterFns.includesString;\n      }\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange;\n      }\n      if (typeof value === 'boolean') {\n        return filterFns.equals;\n      }\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals;\n      }\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes;\n      }\n      return filterFns.weakEquals;\n    };\n    column.getFilterFn = () => {\n      var _table$options$filter, _table$options$filter2;\n      return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() : // @ts-ignore\n      (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n    };\n    column.getCanFilter = () => {\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n      return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n    };\n    column.getIsFiltered = () => column.getFilterIndex() > -1;\n    column.getFilterValue = () => {\n      var _table$getState$colum;\n      return (_table$getState$colum = table.getState().columnFilters) == null || (_table$getState$colum = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum.value;\n    };\n    column.getFilterIndex = () => {\n      var _table$getState$colum2, _table$getState$colum3;\n      return (_table$getState$colum2 = (_table$getState$colum3 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum3.findIndex(d => d.id === column.id)) != null ? _table$getState$colum2 : -1;\n    };\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn();\n        const previousFilter = old == null ? void 0 : old.find(d => d.id === column.id);\n        const newFilter = functionalUpdate(value, previousFilter ? previousFilter.value : undefined);\n\n        //\n        if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n          var _old$filter;\n          return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n        }\n        const newFilterObj = {\n          id: column.id,\n          value: newFilter\n        };\n        if (previousFilter) {\n          var _old$map;\n          return (_old$map = old == null ? void 0 : old.map(d => {\n            if (d.id === column.id) {\n              return newFilterObj;\n            }\n            return d;\n          })) != null ? _old$map : [];\n        }\n        if (old != null && old.length) {\n          return [...old, newFilterObj];\n        }\n        return [newFilterObj];\n      });\n    };\n  },\n  createRow: (row, _table) => {\n    row.columnFilters = {};\n    row.columnFiltersMeta = {};\n  },\n  createTable: table => {\n    table.setColumnFilters = updater => {\n      const leafColumns = table.getAllLeafColumns();\n      const updateFn = old => {\n        var _functionalUpdate;\n        return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id);\n          if (column) {\n            const filterFn = column.getFilterFn();\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false;\n            }\n          }\n          return true;\n        });\n      };\n      table.options.onColumnFiltersChange == null || table.options.onColumnFiltersChange(updateFn);\n    };\n    table.resetColumnFilters = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n    };\n    table.getPreFilteredRowModel = () => table.getCoreRowModel();\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n      }\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getFilteredRowModel();\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  const values = leafRows.map(row => row.getValue(columnId));\n  if (!isNumberArray(values)) {\n    return;\n  }\n  if (values.length === 1) {\n    return values[0];\n  }\n  const mid = Math.floor(values.length / 2);\n  const nums = values.sort((a, b) => a - b);\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\n\nconst ColumnGrouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n        return (_toString = (_props$getValue = props.getValue()) == null || _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old != null && old.includes(column.id)) {\n          return old.filter(d => d !== column.id);\n        }\n        return [...(old != null ? old : []), column.id];\n      });\n    };\n    column.getCanGroup = () => {\n      var _ref, _ref2, _ref3, _column$columnDef$ena;\n      return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;\n    };\n    column.getIsGrouped = () => {\n      var _table$getState$group;\n      return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n    };\n    column.getGroupedIndex = () => {\n      var _table$getState$group2;\n      return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n    };\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup();\n      return () => {\n        if (!canGroup) return;\n        column.toggleGrouping();\n      };\n    };\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'number') {\n        return aggregationFns.sum;\n      }\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent;\n      }\n    };\n    column.getAggregationFn = () => {\n      var _table$options$aggreg, _table$options$aggreg2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n    };\n  },\n  createTable: table => {\n    table.setGrouping = updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater);\n    table.resetGrouping = defaultState => {\n      var _table$initialState$g, _table$initialState;\n      table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n    };\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel();\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n      }\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel();\n      }\n      return table._getGroupedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.getIsGrouped = () => !!row.groupingColumnId;\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.columnDef.getGroupingValue)) {\n        return row.getValue(columnId);\n      }\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(row.original);\n      return row._groupingValuesCache[columnId];\n    };\n    row._groupingValuesCache = {};\n  },\n  createCell: (cell, column, row, table) => {\n    cell.getIsGrouped = () => column.getIsGrouped() && column.id === row.groupingColumnId;\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped();\n    cell.getIsAggregated = () => {\n      var _row$subRows;\n      return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\n\nconst ColumnOrdering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.getIndex = memo(position => [_getVisibleLeafColumns(table, position)], columns => columns.findIndex(d => d.id === column.id), getMemoOptions(table.options, 'debugColumns', 'getIndex'));\n    column.getIsFirstColumn = position => {\n      var _columns$;\n      const columns = _getVisibleLeafColumns(table, position);\n      return ((_columns$ = columns[0]) == null ? void 0 : _columns$.id) === column.id;\n    };\n    column.getIsLastColumn = position => {\n      var _columns;\n      const columns = _getVisibleLeafColumns(table, position);\n      return ((_columns = columns[columns.length - 1]) == null ? void 0 : _columns.id) === column.id;\n    };\n  },\n  createTable: table => {\n    table.setColumnOrder = updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater);\n    table.resetColumnOrder = defaultState => {\n      var _table$initialState$c;\n      table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n    };\n    table._getOrderColumnsFn = memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n      // Sort grouped columns to the start of the column list\n      // before the headers are built\n      let orderedColumns = [];\n\n      // If there is no order, return the normal columns\n      if (!(columnOrder != null && columnOrder.length)) {\n        orderedColumns = columns;\n      } else {\n        const columnOrderCopy = [...columnOrder];\n\n        // If there is an order, make a copy of the columns\n        const columnsCopy = [...columns];\n\n        // And make a new ordered array of the columns\n\n        // Loop over the columns and place them in order into the new array\n        while (columnsCopy.length && columnOrderCopy.length) {\n          const targetColumnId = columnOrderCopy.shift();\n          const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n          if (foundIndex > -1) {\n            orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n          }\n        }\n\n        // If there are any columns left, add them to the end\n        orderedColumns = [...orderedColumns, ...columnsCopy];\n      }\n      return orderColumns(orderedColumns, grouping, groupedColumnMode);\n    }, getMemoOptions(table.options, 'debugTable', '_getOrderColumnsFn'));\n  }\n};\n\n//\n\nconst getDefaultColumnPinningState = () => ({\n  left: [],\n  right: []\n});\nconst ColumnPinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultColumnPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.pin = position => {\n      const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n      table.setColumnPinning(old => {\n        var _old$left3, _old$right3;\n        if (position === 'right') {\n          var _old$left, _old$right;\n          return {\n            left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n          };\n        }\n        if (position === 'left') {\n          var _old$left2, _old$right2;\n          return {\n            left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n            right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        }\n        return {\n          left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n          right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n        };\n      });\n    };\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns();\n      return leafColumns.some(d => {\n        var _d$columnDef$enablePi, _ref, _table$options$enable;\n        return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_ref = (_table$options$enable = table.options.enableColumnPinning) != null ? _table$options$enable : table.options.enablePinning) != null ? _ref : true);\n      });\n    };\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id);\n      const {\n        left,\n        right\n      } = table.getState().columnPinning;\n      const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n      const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n      return isLeft ? 'left' : isRight ? 'right' : false;\n    };\n    column.getPinnedIndex = () => {\n      var _table$getState$colum, _table$getState$colum2;\n      const position = column.getIsPinned();\n      return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null || (_table$getState$colum2 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum2.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n    };\n  },\n  createRow: (row, table) => {\n    row.getCenterVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allCells.filter(d => !leftAndRight.includes(d.column.id));\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterVisibleCells'));\n    row.getLeftVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left], (allCells, left) => {\n      const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'left'\n      }));\n      return cells;\n    }, getMemoOptions(table.options, 'debugRows', 'getLeftVisibleCells'));\n    row.getRightVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n      const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'right'\n      }));\n      return cells;\n    }, getMemoOptions(table.options, 'debugRows', 'getRightVisibleCells'));\n  },\n  createTable: table => {\n    table.setColumnPinning = updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater);\n    table.resetColumnPinning = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      return table.setColumnPinning(defaultState ? getDefaultColumnPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultColumnPinningState());\n    };\n    table.getIsSomeColumnsPinned = position => {\n      var _pinningState$positio;\n      const pinningState = table.getState().columnPinning;\n      if (!position) {\n        var _pinningState$left, _pinningState$right;\n        return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n      }\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n    };\n    table.getLeftLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n      return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, getMemoOptions(table.options, 'debugColumns', 'getLeftLeafColumns'));\n    table.getRightLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n      return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, getMemoOptions(table.options, 'debugColumns', 'getRightLeafColumns'));\n    table.getCenterLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allColumns.filter(d => !leftAndRight.includes(d.id));\n    }, getMemoOptions(table.options, 'debugColumns', 'getCenterLeafColumns'));\n  }\n};\n\n//\n\n//\n\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      columnResizeDirection: 'ltr',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.getSize = () => {\n      var _column$columnDef$min, _ref, _column$columnDef$max;\n      const columnSize = table.getState().columnSizing[column.id];\n      return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n    };\n    column.getStart = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(0, column.getIndex(position)).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getStart'));\n    column.getAfter = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(column.getIndex(position) + 1).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getAfter'));\n    column.resetSize = () => {\n      table.setColumnSizing(_ref2 => {\n        let {\n          [column.id]: _,\n          ...rest\n        } = _ref2;\n        return rest;\n      });\n    };\n    column.getCanResize = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n    };\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id;\n    };\n  },\n  createHeader: (header, table) => {\n    header.getSize = () => {\n      let sum = 0;\n      const recurse = header => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse);\n        } else {\n          var _header$column$getSiz;\n          sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n        }\n      };\n      recurse(header);\n      return sum;\n    };\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n      }\n      return 0;\n    };\n    header.getResizeHandler = _contextDocument => {\n      const column = table.getColumn(header.column.id);\n      const canResize = column == null ? void 0 : column.getCanResize();\n      return e => {\n        if (!column || !canResize) {\n          return;\n        }\n        e.persist == null || e.persist();\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return;\n          }\n        }\n        const startSize = header.getSize();\n        const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n        const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n        const newColumnSizing = {};\n        const updateOffset = (eventType, clientXPos) => {\n          if (typeof clientXPos !== 'number') {\n            return;\n          }\n          table.setColumnSizingInfo(old => {\n            var _old$startOffset, _old$startSize;\n            const deltaDirection = table.options.columnResizeDirection === 'rtl' ? -1 : 1;\n            const deltaOffset = (clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0)) * deltaDirection;\n            const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n            old.columnSizingStart.forEach(_ref3 => {\n              let [columnId, headerSize] = _ref3;\n              newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n            });\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage\n            };\n          });\n          if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing\n            }));\n          }\n        };\n        const onMove = clientXPos => updateOffset('move', clientXPos);\n        const onEnd = clientXPos => {\n          updateOffset('end', clientXPos);\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: []\n          }));\n        };\n        const contextDocument = _contextDocument || typeof document !== 'undefined' ? document : null;\n        const mouseEvents = {\n          moveHandler: e => onMove(e.clientX),\n          upHandler: e => {\n            contextDocument == null || contextDocument.removeEventListener('mousemove', mouseEvents.moveHandler);\n            contextDocument == null || contextDocument.removeEventListener('mouseup', mouseEvents.upHandler);\n            onEnd(e.clientX);\n          }\n        };\n        const touchEvents = {\n          moveHandler: e => {\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onMove(e.touches[0].clientX);\n            return false;\n          },\n          upHandler: e => {\n            var _e$touches$;\n            contextDocument == null || contextDocument.removeEventListener('touchmove', touchEvents.moveHandler);\n            contextDocument == null || contextDocument.removeEventListener('touchend', touchEvents.upHandler);\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\n          }\n        };\n        const passiveIfSupported = passiveEventSupported() ? {\n          passive: false\n        } : false;\n        if (isTouchStartEvent(e)) {\n          contextDocument == null || contextDocument.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n          contextDocument == null || contextDocument.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n        } else {\n          contextDocument == null || contextDocument.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n          contextDocument == null || contextDocument.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n        }\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id\n        }));\n      };\n    };\n  },\n  createTable: table => {\n    table.setColumnSizing = updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater);\n    table.setColumnSizingInfo = updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater);\n    table.resetColumnSizing = defaultState => {\n      var _table$initialState$c;\n      table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n    };\n    table.resetHeaderSizeInfo = defaultState => {\n      var _table$initialState$c2;\n      table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n    };\n    table.getTotalSize = () => {\n      var _table$getHeaderGroup, _table$getHeaderGroup2;\n      return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getHeaderGroup : 0;\n    };\n    table.getLeftTotalSize = () => {\n      var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n      return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getLeftHeaderG : 0;\n    };\n    table.getCenterTotalSize = () => {\n      var _table$getCenterHeade, _table$getCenterHeade2;\n      return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getCenterHeade : 0;\n    };\n    table.getRightTotalSize = () => {\n      var _table$getRightHeader, _table$getRightHeader2;\n      return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getRightHeader : 0;\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n    };\n    const noop = () => {};\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\n\nconst ColumnVisibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value != null ? value : !column.getIsVisible()\n        }));\n      }\n    };\n    column.getIsVisible = () => {\n      var _ref, _table$getState$colum;\n      const childColumns = column.columns;\n      return (_ref = childColumns.length ? childColumns.some(c => c.getIsVisible()) : (_table$getState$colum = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum[column.id]) != null ? _ref : true;\n    };\n    column.getCanHide = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n    };\n    column.getToggleVisibilityHandler = () => {\n      return e => {\n        column.toggleVisibility == null || column.toggleVisibility(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row._getAllVisibleCells = memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n      return cells.filter(cell => cell.column.getIsVisible());\n    }, getMemoOptions(table.options, 'debugRows', '_getAllVisibleCells'));\n    row.getVisibleCells = memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], getMemoOptions(table.options, 'debugRows', 'getVisibleCells'));\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, getMemoOptions(table.options, 'debugColumns', key));\n    };\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns());\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns());\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns());\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns());\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns());\n    table.setColumnVisibility = updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater);\n    table.resetColumnVisibility = defaultState => {\n      var _table$initialState$c;\n      table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n    };\n    table.toggleAllColumnsVisible = value => {\n      var _value;\n      value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n      table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\n        ...obj,\n        [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n      }), {}));\n    };\n    table.getIsAllColumnsVisible = () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible()));\n    table.getIsSomeColumnsVisible = () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible());\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return e => {\n        var _target;\n        table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\nfunction _getVisibleLeafColumns(table, position) {\n  return !position ? table.getVisibleLeafColumns() : position === 'center' ? table.getCenterVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n}\n\n//\n\nconst GlobalFiltering = {\n  getInitialState: state => {\n    return {\n      globalFilter: undefined,\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode;\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null || (_table$getCoreRowMode = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getCanGlobalFilter = () => {\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2, _table$options$getCol;\n      return ((_column$columnDef$ena = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGlobalFilter) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n    };\n  },\n  createTable: table => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString;\n    };\n    table.getGlobalFilterFn = () => {\n      var _table$options$filter, _table$options$filter2;\n      const {\n        globalFilterFn: globalFilterFn\n      } = table.options;\n      return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() : // @ts-ignore\n      (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[globalFilterFn]) != null ? _table$options$filter : filterFns[globalFilterFn];\n    };\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange == null || table.options.onGlobalFilterChange(updater);\n    };\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n    };\n    table._getGlobalFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__');\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getGlobalFacetedRowModel();\n    };\n    table._getGlobalFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__');\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map();\n      }\n      return table._getGlobalFacetedUniqueValues();\n    };\n    table._getGlobalFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__');\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return;\n      }\n      return table._getGlobalFacetedMinMaxValues();\n    };\n  }\n};\n\n//\n\nconst RowExpanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetExpanded = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetExpanded();\n          queued = false;\n        });\n      }\n    };\n    table.setExpanded = updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater);\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true);\n      } else {\n        table.setExpanded({});\n      }\n    };\n    table.resetExpanded = defaultState => {\n      var _table$initialState$e, _table$initialState;\n      table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n    };\n    table.getCanSomeRowsExpand = () => {\n      return table.getPrePaginationRowModel().flatRows.some(row => row.getCanExpand());\n    };\n    table.getToggleAllRowsExpandedHandler = () => {\n      return e => {\n        e.persist == null || e.persist();\n        table.toggleAllRowsExpanded();\n      };\n    };\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n      return expanded === true || Object.values(expanded).some(Boolean);\n    };\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true;\n      }\n      if (!Object.keys(expanded).length) {\n        return false;\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false;\n      }\n\n      // They must all be expanded :shrug:\n      return true;\n    };\n    table.getExpandedDepth = () => {\n      let maxDepth = 0;\n      const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n      rowIds.forEach(id => {\n        const splitId = id.split('.');\n        maxDepth = Math.max(maxDepth, splitId.length);\n      });\n      return maxDepth;\n    };\n    table.getPreExpandedRowModel = () => table.getSortedRowModel();\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n      }\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel();\n      }\n      return table._getExpandedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        var _expanded;\n        const exists = old === true ? true : !!(old != null && old[row.id]);\n        let oldExpanded = {};\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true;\n          });\n        } else {\n          oldExpanded = old;\n        }\n        expanded = (_expanded = expanded) != null ? _expanded : !exists;\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true\n          };\n        }\n        if (exists && !expanded) {\n          const {\n            [row.id]: _,\n            ...rest\n          } = oldExpanded;\n          return rest;\n        }\n        return old;\n      });\n    };\n    row.getIsExpanded = () => {\n      var _table$options$getIsR;\n      const expanded = table.getState().expanded;\n      return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n    };\n    row.getCanExpand = () => {\n      var _table$options$getRow, _table$options$enable, _row$subRows;\n      return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n    row.getIsAllParentsExpanded = () => {\n      let isFullyExpanded = true;\n      let currentRow = row;\n      while (isFullyExpanded && currentRow.parentId) {\n        currentRow = table.getRow(currentRow.parentId, true);\n        isFullyExpanded = currentRow.getIsExpanded();\n      }\n      return isFullyExpanded;\n    };\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand();\n      return () => {\n        if (!canExpand) return;\n        row.toggleExpanded();\n      };\n    };\n  }\n};\n\n//\n\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\nconst RowPagination = {\n  getInitialState: state => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetPageIndex = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetPageIndex();\n          queued = false;\n        });\n      }\n    };\n    table.setPagination = updater => {\n      const safeUpdater = old => {\n        let newState = functionalUpdate(updater, old);\n        return newState;\n      };\n      return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n    };\n    table.resetPagination = defaultState => {\n      var _table$initialState$p;\n      table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n    };\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex);\n        const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n        return {\n          ...old,\n          pageIndex\n        };\n      });\n    };\n    table.resetPageIndex = defaultState => {\n      var _table$initialState$p2, _table$initialState;\n      table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null || (_table$initialState = _table$initialState.pagination) == null ? void 0 : _table$initialState.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n    };\n    table.resetPageSize = defaultState => {\n      var _table$initialState$p3, _table$initialState2;\n      table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p3 = (_table$initialState2 = table.initialState) == null || (_table$initialState2 = _table$initialState2.pagination) == null ? void 0 : _table$initialState2.pageSize) != null ? _table$initialState$p3 : defaultPageSize);\n    };\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n        const topRowIndex = old.pageSize * old.pageIndex;\n        const pageIndex = Math.floor(topRowIndex / pageSize);\n        return {\n          ...old,\n          pageIndex,\n          pageSize\n        };\n      });\n    };\n    //deprecated\n    table.setPageCount = updater => table.setPagination(old => {\n      var _table$options$pageCo;\n      let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n      if (typeof newPageCount === 'number') {\n        newPageCount = Math.max(-1, newPageCount);\n      }\n      return {\n        ...old,\n        pageCount: newPageCount\n      };\n    });\n    table.getPageOptions = memo(() => [table.getPageCount()], pageCount => {\n      let pageOptions = [];\n      if (pageCount && pageCount > 0) {\n        pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n      }\n      return pageOptions;\n    }, getMemoOptions(table.options, 'debugTable', 'getPageOptions'));\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0;\n    table.getCanNextPage = () => {\n      const {\n        pageIndex\n      } = table.getState().pagination;\n      const pageCount = table.getPageCount();\n      if (pageCount === -1) {\n        return true;\n      }\n      if (pageCount === 0) {\n        return false;\n      }\n      return pageIndex < pageCount - 1;\n    };\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1);\n    };\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1;\n      });\n    };\n    table.firstPage = () => {\n      return table.setPageIndex(0);\n    };\n    table.lastPage = () => {\n      return table.setPageIndex(table.getPageCount() - 1);\n    };\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel();\n    table.getPaginationRowModel = () => {\n      if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n        table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n      }\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel();\n      }\n      return table._getPaginationRowModel();\n    };\n    table.getPageCount = () => {\n      var _table$options$pageCo2;\n      return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getRowCount() / table.getState().pagination.pageSize);\n    };\n    table.getRowCount = () => {\n      var _table$options$rowCou;\n      return (_table$options$rowCou = table.options.rowCount) != null ? _table$options$rowCou : table.getPrePaginationRowModel().rows.length;\n    };\n  }\n};\n\n//\n\nconst getDefaultRowPinningState = () => ({\n  top: [],\n  bottom: []\n});\nconst RowPinning = {\n  getInitialState: state => {\n    return {\n      rowPinning: getDefaultRowPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowPinningChange: makeStateUpdater('rowPinning', table)\n    };\n  },\n  createRow: (row, table) => {\n    row.pin = (position, includeLeafRows, includeParentRows) => {\n      const leafRowIds = includeLeafRows ? row.getLeafRows().map(_ref => {\n        let {\n          id\n        } = _ref;\n        return id;\n      }) : [];\n      const parentRowIds = includeParentRows ? row.getParentRows().map(_ref2 => {\n        let {\n          id\n        } = _ref2;\n        return id;\n      }) : [];\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds]);\n      table.setRowPinning(old => {\n        var _old$top3, _old$bottom3;\n        if (position === 'bottom') {\n          var _old$top, _old$bottom;\n          return {\n            top: ((_old$top = old == null ? void 0 : old.top) != null ? _old$top : []).filter(d => !(rowIds != null && rowIds.has(d))),\n            bottom: [...((_old$bottom = old == null ? void 0 : old.bottom) != null ? _old$bottom : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)]\n          };\n        }\n        if (position === 'top') {\n          var _old$top2, _old$bottom2;\n          return {\n            top: [...((_old$top2 = old == null ? void 0 : old.top) != null ? _old$top2 : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)],\n            bottom: ((_old$bottom2 = old == null ? void 0 : old.bottom) != null ? _old$bottom2 : []).filter(d => !(rowIds != null && rowIds.has(d)))\n          };\n        }\n        return {\n          top: ((_old$top3 = old == null ? void 0 : old.top) != null ? _old$top3 : []).filter(d => !(rowIds != null && rowIds.has(d))),\n          bottom: ((_old$bottom3 = old == null ? void 0 : old.bottom) != null ? _old$bottom3 : []).filter(d => !(rowIds != null && rowIds.has(d)))\n        };\n      });\n    };\n    row.getCanPin = () => {\n      var _ref3;\n      const {\n        enableRowPinning,\n        enablePinning\n      } = table.options;\n      if (typeof enableRowPinning === 'function') {\n        return enableRowPinning(row);\n      }\n      return (_ref3 = enableRowPinning != null ? enableRowPinning : enablePinning) != null ? _ref3 : true;\n    };\n    row.getIsPinned = () => {\n      const rowIds = [row.id];\n      const {\n        top,\n        bottom\n      } = table.getState().rowPinning;\n      const isTop = rowIds.some(d => top == null ? void 0 : top.includes(d));\n      const isBottom = rowIds.some(d => bottom == null ? void 0 : bottom.includes(d));\n      return isTop ? 'top' : isBottom ? 'bottom' : false;\n    };\n    row.getPinnedIndex = () => {\n      var _table$_getPinnedRows, _visiblePinnedRowIds$;\n      const position = row.getIsPinned();\n      if (!position) return -1;\n      const visiblePinnedRowIds = (_table$_getPinnedRows = table._getPinnedRows(position)) == null ? void 0 : _table$_getPinnedRows.map(_ref4 => {\n        let {\n          id\n        } = _ref4;\n        return id;\n      });\n      return (_visiblePinnedRowIds$ = visiblePinnedRowIds == null ? void 0 : visiblePinnedRowIds.indexOf(row.id)) != null ? _visiblePinnedRowIds$ : -1;\n    };\n  },\n  createTable: table => {\n    table.setRowPinning = updater => table.options.onRowPinningChange == null ? void 0 : table.options.onRowPinningChange(updater);\n    table.resetRowPinning = defaultState => {\n      var _table$initialState$r, _table$initialState;\n      return table.setRowPinning(defaultState ? getDefaultRowPinningState() : (_table$initialState$r = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.rowPinning) != null ? _table$initialState$r : getDefaultRowPinningState());\n    };\n    table.getIsSomeRowsPinned = position => {\n      var _pinningState$positio;\n      const pinningState = table.getState().rowPinning;\n      if (!position) {\n        var _pinningState$top, _pinningState$bottom;\n        return Boolean(((_pinningState$top = pinningState.top) == null ? void 0 : _pinningState$top.length) || ((_pinningState$bottom = pinningState.bottom) == null ? void 0 : _pinningState$bottom.length));\n      }\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n    };\n    table._getPinnedRows = memo(position => [table.getRowModel().rows, table.getState().rowPinning[position], position], (visibleRows, pinnedRowIds, position) => {\n      var _table$options$keepPi;\n      const rows = ((_table$options$keepPi = table.options.keepPinnedRows) != null ? _table$options$keepPi : true) ?\n      //get all rows that are pinned even if they would not be otherwise visible\n      //account for expanded parent rows, but not pagination or filtering\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => {\n        const row = table.getRow(rowId, true);\n        return row.getIsAllParentsExpanded() ? row : null;\n      }) :\n      //else get only visible rows that are pinned\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => visibleRows.find(row => row.id === rowId));\n      return rows.filter(Boolean).map(d => ({\n        ...d,\n        position\n      }));\n    }, getMemoOptions(table.options, 'debugRows', '_getPinnedRows'));\n    table.getTopRows = () => table._getPinnedRows('top');\n    table.getBottomRows = () => table._getPinnedRows('bottom');\n    table.getCenterRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top, table.getState().rowPinning.bottom], (allRows, top, bottom) => {\n      const topAndBottom = new Set([...(top != null ? top : []), ...(bottom != null ? bottom : [])]);\n      return allRows.filter(d => !topAndBottom.has(d.id));\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterRows'));\n  }\n};\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n  createTable: table => {\n    table.setRowSelection = updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater);\n    table.resetRowSelection = defaultState => {\n      var _table$initialState$r;\n      return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n    };\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return;\n            }\n            rowSelection[row.id] = true;\n          });\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id];\n          });\n        }\n        return rowSelection;\n      });\n    };\n    table.toggleAllPageRowsSelected = value => table.setRowSelection(old => {\n      const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n      const rowSelection = {\n        ...old\n      };\n      table.getRowModel().rows.forEach(row => {\n        mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table);\n      });\n      return rowSelection;\n    });\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel();\n    table.getSelectedRowModel = memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getSelectedRowModel'));\n    table.getFilteredSelectedRowModel = memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getFilteredSelectedRowModel'));\n    table.getGroupedSelectedRowModel = memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getGroupedSelectedRowModel'));\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n      if (isAllRowsSelected) {\n        if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n          isAllRowsSelected = false;\n        }\n      }\n      return isAllRowsSelected;\n    };\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows.filter(row => row.getCanSelect());\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllPageRowsSelected = !!paginationFlatRows.length;\n      if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n        isAllPageRowsSelected = false;\n      }\n      return isAllPageRowsSelected;\n    };\n    table.getIsSomeRowsSelected = () => {\n      var _table$getState$rowSe;\n      const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n      return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n    };\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows;\n      return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter(row => row.getCanSelect()).some(d => d.getIsSelected() || d.getIsSomeSelected());\n    };\n    table.getToggleAllRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllRowsSelected(e.target.checked);\n      };\n    };\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllPageRowsSelected(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleSelected = (value, opts) => {\n      const isSelected = row.getIsSelected();\n      table.setRowSelection(old => {\n        var _opts$selectChildren;\n        value = typeof value !== 'undefined' ? value : !isSelected;\n        if (row.getCanSelect() && isSelected === value) {\n          return old;\n        }\n        const selectedRowIds = {\n          ...old\n        };\n        mutateRowIsSelected(selectedRowIds, row.id, value, (_opts$selectChildren = opts == null ? void 0 : opts.selectChildren) != null ? _opts$selectChildren : true, table);\n        return selectedRowIds;\n      });\n    };\n    row.getIsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isRowSelected(row, rowSelection);\n    };\n    row.getIsSomeSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'some';\n    };\n    row.getIsAllSubRowsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'all';\n    };\n    row.getCanSelect = () => {\n      var _table$options$enable;\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row);\n      }\n      return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n    };\n    row.getCanSelectSubRows = () => {\n      var _table$options$enable2;\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row);\n      }\n      return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n    };\n    row.getCanMultiSelect = () => {\n      var _table$options$enable3;\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row);\n      }\n      return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n    };\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect();\n      return e => {\n        var _target;\n        if (!canSelect) return;\n        row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, includeChildren, table) => {\n  var _row$subRows;\n  const row = table.getRow(id, true);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if (includeChildren && (_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, includeChildren, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      var _row$subRows2;\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  var _row$subRows3;\n  if (!((_row$subRows3 = row.subRows) != null && _row$subRows3.length)) return false;\n  let allChildrenSelected = true;\n  let someSelected = false;\n  row.subRows.forEach(subRow => {\n    // Bail out early if we know both of these\n    if (someSelected && !allChildrenSelected) {\n      return;\n    }\n    if (subRow.getCanSelect()) {\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    }\n\n    // Check row selection of nested subrows\n    if (subRow.subRows && subRow.subRows.length) {\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection);\n      if (subRowChildrenSelected === 'all') {\n        someSelected = true;\n      } else if (subRowChildrenSelected === 'some') {\n        someSelected = true;\n        allChildrenSelected = false;\n      } else {\n        allChildrenSelected = false;\n      }\n    }\n  });\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\n\nconst RowSorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n      let isString = false;\n      for (const row of firstRows) {\n        const value = row == null ? void 0 : row.getValue(column.id);\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime;\n        }\n        if (typeof value === 'string') {\n          isString = true;\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric;\n          }\n        }\n      }\n      if (isString) {\n        return sortingFns.text;\n      }\n      return sortingFns.basic;\n    };\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return 'asc';\n      }\n      return 'desc';\n    };\n    column.getSortingFn = () => {\n      var _table$options$sortin, _table$options$sortin2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n    };\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder();\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n        const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n        let newSorting = [];\n\n        // What should we do with this sort action?\n        let sortAction;\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n        // Multi-mode\n        if (old != null && old.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'add';\n          }\n        } else {\n          // Normal mode\n          if (old != null && old.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace';\n          } else if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'replace';\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove';\n            }\n          }\n        }\n        if (sortAction === 'add') {\n          var _table$options$maxMul;\n          newSorting = [...old, {\n            id: column.id,\n            desc: nextDesc\n          }];\n          // Take latest n columns\n          newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc\n              };\n            }\n            return d;\n          });\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id);\n        } else {\n          newSorting = [{\n            id: column.id,\n            desc: nextDesc\n          }];\n        }\n        return newSorting;\n      });\n    };\n    column.getFirstSortDir = () => {\n      var _ref, _column$columnDef$sor;\n      const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n      return sortDescFirst ? 'desc' : 'asc';\n    };\n    column.getNextSortingOrder = multi => {\n      var _table$options$enable, _table$options$enable2;\n      const firstSortDirection = column.getFirstSortDir();\n      const isSorted = column.getIsSorted();\n      if (!isSorted) {\n        return firstSortDirection;\n      }\n      if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n      // If enableSortRemove, enable in general\n      multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false;\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc';\n    };\n    column.getCanSort = () => {\n      var _column$columnDef$ena, _table$options$enable3;\n      return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n    };\n    column.getCanMultiSort = () => {\n      var _ref2, _column$columnDef$ena2;\n      return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n    };\n    column.getIsSorted = () => {\n      var _table$getState$sorti;\n      const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n    };\n    column.getSortIndex = () => {\n      var _table$getState$sorti2, _table$getState$sorti3;\n      return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n    };\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n    };\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort();\n      return e => {\n        if (!canSort) return;\n        e.persist == null || e.persist();\n        column.toggleSorting == null || column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n      };\n    };\n  },\n  createTable: table => {\n    table.setSorting = updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater);\n    table.resetSorting = defaultState => {\n      var _table$initialState$s, _table$initialState;\n      table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n    };\n    table.getPreSortedRowModel = () => table.getGroupedRowModel();\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table);\n      }\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel();\n      }\n      return table._getSortedRowModel();\n    };\n  }\n};\n\nconst builtInFeatures = [Headers, ColumnVisibility, ColumnOrdering, ColumnPinning, ColumnFaceting, ColumnFiltering, GlobalFiltering,\n//depends on ColumnFiltering and ColumnFaceting\nRowSorting, ColumnGrouping,\n//depends on RowSorting\nRowExpanding, RowPagination, RowPinning, RowSelection, ColumnSizing];\n\n//\n\nfunction createTable(options) {\n  var _options$_features, _options$initialState;\n  if (process.env.NODE_ENV !== 'production' && (options.debugAll || options.debugTable)) {\n    console.info('Creating Table Instance...');\n  }\n  const _features = [...builtInFeatures, ...((_options$_features = options._features) != null ? _options$_features : [])];\n  let table = {\n    _features\n  };\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  };\n  const coreInitialState = {};\n  let initialState = {\n    ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features,\n    options: {\n      ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n      if (!queuedTimeout) {\n        queuedTimeout = true;\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null || table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    //in next version, we should just pass in the row model as the optional 2nd arg\n    getRow: (id, searchAll) => {\n      let row = (searchAll ? table.getPrePaginationRowModel() : table.getRowModel()).rowsById[id];\n      if (!row) {\n        row = table.getCoreRowModel().rowsById[id];\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`getRow could not find row with ID: ${id}`);\n          }\n          throw new Error();\n        }\n      }\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null || _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, getMemoOptions(options, 'debugColumns', '_getDefaultColumnDef')),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n      return recurseColumns(columnDefs);\n    }, getMemoOptions(options, 'debugColumns', 'getAllColumns')),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumns')),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumnsById')),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, getMemoOptions(options, 'debugColumns', 'getAllLeafColumns')),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`);\n      }\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index];\n    feature == null || feature.createTable == null || feature.createTable(table);\n  }\n  return table;\n}\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parentRow) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, undefined, parentRow == null ? void 0 : parentRow.id);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row.id] = row;\n        // Push table row into parent\n        rows.push(row);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, getMemoOptions(table.options, 'debugTable', 'getRowModel', () => table._autoResetPageIndex()));\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, getMemoOptions(table.options, 'debugTable', 'getExpandedRowModel'));\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    var _row$subRows;\n    expandedRows.push(row);\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    var _facetedRowModel$flat;\n    if (!facetedRowModel) return undefined;\n    const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getUniqueValues(columnId);\n    if (typeof firstValue === 'undefined') {\n      return undefined;\n    }\n    let facetedMinMaxValues = [firstValue, firstValue];\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (value < facetedMinMaxValues[0]) {\n          facetedMinMaxValues[0] = value;\n        } else if (value > facetedMinMaxValues[1]) {\n          facetedMinMaxValues[1] = value;\n        }\n      }\n    }\n    return facetedMinMaxValues;\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedMinMaxValues'));\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    const rows = [];\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n      let row = rowsToFilter[i];\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n      newRow.columnFilters = row.columnFilters;\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n      } else {\n        row = newRow;\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n        }\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\n\n  // Filters top level and nested rows\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    // Filter from parents downward first\n\n    const rows = [];\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n      if (pass) {\n        var _row$subRows2;\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedRowModel'));\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    if (!facetedRowModel) return new Map();\n    let facetedUniqueValues = new Map();\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (facetedUniqueValues.has(value)) {\n          var _facetedUniqueValues$;\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n        } else {\n          facetedUniqueValues.set(value, 1);\n        }\n      }\n    }\n    return facetedUniqueValues;\n  }, getMemoOptions(table.options, 'debugTable', `getFacetedUniqueValues_${columnId}`));\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        return;\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = columnFilters.map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, getMemoOptions(table.options, 'debugTable', 'getFilteredRowModel', () => table._autoResetPageIndex()));\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      return rowModel;\n    }\n\n    // Filter the grouping list down to columns that exist\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {};\n    // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n    // Recursively group the data\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id);\n          }\n          return row;\n        });\n      }\n      const columnId = existingGrouping[depth];\n\n      // Group the rows together for this level\n      const rowGroupsMap = groupBy(rows, columnId);\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id;\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth, undefined, parentId);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n              return row._valuesCache[columnId];\n            }\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            }\n\n            // Aggregate the values\n            const column = table.getColumn(columnId);\n            const aggregateFn = column == null ? void 0 : column.getAggregationFn();\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n    const groupedRows = groupUpRecursively(rowModel.rows, 0);\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n      // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, getMemoOptions(table.options, 'debugTable', 'getGroupedRowModel', () => {\n    table._queue(() => {\n      table._autoResetExpanded();\n      table._autoResetPageIndex();\n    });\n  }));\n}\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`;\n    const previous = map.get(resKey);\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n    return map;\n  }, groupMap);\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n    paginatedRowModel.flatRows = [];\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, getMemoOptions(table.options, 'debugTable', 'getPaginationRowModel'));\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => {\n      var _table$getColumn;\n      return (_table$getColumn = table.getColumn(sort.id)) == null ? void 0 : _table$getColumn.getCanSort();\n    });\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      if (!column) return;\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = rows.map(row => ({\n        ...row\n      }));\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n          let sortInt = 0;\n\n          // All sorting ints should always return in ascending order\n          if (columnInfo.sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = aValue === undefined;\n            const bUndefined = bValue === undefined;\n            if (aUndefined || bUndefined) {\n              sortInt = aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n            }\n          }\n          if (sortInt === 0) {\n            sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          }\n\n          // If sorting is non-zero, take care of desc and inversion\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        var _row$subRows;\n        sortedFlatRows.push(row);\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, getMemoOptions(table.options, 'debugTable', 'getSortedRowModel', () => table._autoResetPageIndex()));\n}\n\nexport { ColumnFaceting, ColumnFiltering, ColumnGrouping, ColumnOrdering, ColumnPinning, ColumnSizing, ColumnVisibility, GlobalFiltering, Headers, RowExpanding, RowPagination, RowPinning, RowSelection, RowSorting, _getVisibleLeafColumns, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getMemoOptions, getPaginationRowModel, getSortedRowModel, isFunction, isNumberArray, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };\n//# sourceMappingURL=index.mjs.map\n","import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\n/**\n * If rendering headers, cells, or footers with custom markup, use flexRender instead of `cell.getValue()` or `cell.renderValue()`.\n */\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depArgs","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","getMemoOptions","tableOptions","debugLevel","_tableOptions$debugAl","debugAll","createCell","table","row","column","columnId","cell","id","getValue","renderValue","_cell$getValue","options","renderFallbackValue","getContext","_features","feature","createColumn","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","replace","undefined","header","includes","originalRow","split","_result","Error","columns","getFlatColumns","_column$columns","flatMap","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","find","filter","Boolean","rightColumns","buildHeaderGroups","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","getRightHeaderGroups","_right$map$filter2","getFooterGroups","headerGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","_header$subHeaders","getLeftLeafHeaders","_header$subHeaders2","getRightLeafHeaders","_header$subHeaders3","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","createRow","original","rowIndex","subRows","parentId","_valuesCache","_uniqueValuesCache","hasOwnProperty","getColumn","getUniqueValues","_row$getValue","getLeafRows","getParentRow","getRow","getParentRows","parentRows","currentRow","parentRow","getAllCells","getAllLeafColumns","_getAllCellsByColumnId","allCells","reduce","acc","i","ColumnFaceting","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","includesString","filterValue","search","toLowerCase","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","Number","isNaN","Infinity","temp","filterFns","ColumnFiltering","getDefaultColumnDef","filterFn","getInitialState","state","columnFilters","getDefaultOptions","onColumnFiltersChange","filterFromLeafRows","maxLeafRowFilterDepth","getAutoFilterFn","firstRow","getCoreRowModel","flatRows","value","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_column$columnDef$ena","_table$options$enable","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","findIndex","setFilterValue","setColumnFilters","previousFilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_table","columnFiltersMeta","_functionalUpdate","resetColumnFilters","defaultState","_table$initialState$c","_table$initialState","initialState","getFilteredRowModel","_getFilteredRowModel","manualFiltering","aggregationFns","sum","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","values","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","size","_columnId","ColumnGrouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","_ref2","_ref3","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","Object","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","getIsPlaceholder","getIsAggregated","_row$subRows","nonGroupingColumns","col","g","ColumnOrdering","columnOrder","onColumnOrderChange","getIndex","position","_getVisibleLeafColumns","getIsFirstColumn","_columns$","getIsLastColumn","_columns","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","ColumnPinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","enableColumnPinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","leftAndRight","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","defaultColumnSizing","minSize","maxSize","MAX_SAFE_INTEGER","ColumnSizing","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","columnResizeMode","columnResizeDirection","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","slice","getAfter","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","_header$column$getSiz","prevSiblingHeader","getResizeHandler","_contextDocument","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","deltaDirection","headerSize","onMove","onEnd","contextDocument","document","mouseEvents","moveHandler","upHandler","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","err","type","ColumnVisibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","childColumns","c","enableHiding","getToggleVisibilityHandler","target","checked","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","obj","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","_target","GlobalFiltering","globalFilter","onGlobalFilterChange","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","getCanGlobalFilter","_table$options$getCol","enableGlobalFilter","getGlobalAutoFilterFn","getGlobalFilterFn","setGlobalFilter","resetGlobalFilter","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","RowExpanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","getCanSomeRowsExpand","getPrePaginationRowModel","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","keys","getRowModel","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","getRowCanExpand","enableExpanding","getIsAllParentsExpanded","isFullyExpanded","getToggleExpandedHandler","canExpand","RowPagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","resetPageSize","_table$initialState$p3","_table$initialState2","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","getCanPreviousPage","getCanNextPage","previousPage","nextPage","firstPage","lastPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","getRowCount","_table$options$rowCou","rowCount","rows","RowPinning","rowPinning","top","bottom","onRowPinningChange","includeLeafRows","includeParentRows","leafRowIds","parentRowIds","rowIds","setRowPinning","_old$top3","_old$bottom3","_old$top","_old$bottom","_old$top2","_old$bottom2","has","enableRowPinning","isTop","isBottom","_table$_getPinnedRows","_visiblePinnedRowIds$","visiblePinnedRowIds","_getPinnedRows","_ref4","resetRowPinning","_table$initialState$r","getIsSomeRowsPinned","_pinningState$top","_pinningState$bottom","visibleRows","pinnedRowIds","_table$options$keepPi","keepPinnedRows","getTopRows","getBottomRows","getCenterRows","allRows","topAndBottom","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","_opts$selectChildren","selectedRowIds","selectChildren","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","_table$options$enable3","getToggleSelectedHandler","canSelect","includeChildren","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","_row$subRows3","allChildrenSelected","someSelected","subRow","subRowChildrenSelected","reSplitAlphaNumeric","compareBasic","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","RowSorting","sorting","sortingFn","sortUndefined","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","_column$columnDef$ena2","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","builtInFeatures","_options$_features","_options$initialState","defaultOptions","assign","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","searchAll","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","expandRows","expandedRows","handleRow","filterRows","filterRowImpl","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","_table$options$maxLea2","filterRowModelFromRoot","accessor","display","group","Comp","component","proto","getPrototypeOf","isReactComponent","isClassComponent","$$typeof","description","isExoticComponent","React","createElement","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","_table$getColumn","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","j","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","sortInt","aUndefined","bUndefined","resolvedOptions","tableRef","useState","current","prev"],"mappings":"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"}