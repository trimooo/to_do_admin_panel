var u=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});import Fe from"express";import{DevtoolsEvent as p,receive as _,send as m}from"@refinedev/devtools-shared";import ee from"express";import T from"path";var w=e=>{e.use(ee.static(T.join(__dirname,"client"))),e.use((t,r,n)=>{if(t.path.startsWith("/api")||t.path.startsWith("/open-in-editor"))return n();r.status(200).sendFile(T.join(`${__dirname}/client/index.html`))})};import re from"ws";var v="https://cloud2.refine.dev",b="https://raw.githubusercontent.com/refinedev/refine/master/packages/devtools-server/FEED.md";import{DevtoolsEvent as ne,send as ie}from"@refinedev/devtools-shared";import{bold as O,cyanBright as S}from"chalk";var I=()=>{let e=new re.Server({port:5002}).on("error",t=>{(t==null?void 0:t.code)==="EADDRINUSE"?console.error(`
${S.bold("\u2717 ")}${O("refine devtools")} failed to start. Port ${5002} is already in use, please make sure no other devtools server is running
`):console.error(`
${S.bold("\u2717 ")}${O("error from refine devtools")}`,t),process.exit(1)});return e.on("connection",t=>{ie(t,ne.DEVTOOLS_HANDSHAKE,{url:`http://localhost:${5001}`}),t.on("close",()=>{t.terminate()})}),process.on("SIGTERM",()=>{e.close(()=>{})}),e};import"lodash";import"@refinedev/devtools-shared";import"ws";var x=()=>0;import{bold as E,cyanBright as g}from"chalk";var D=e=>{let t=e.listen(5001,()=>{}).on("error",r=>{(r==null?void 0:r.code)==="EADDRINUSE"?console.error(`
${g.bold("\u2717 ")}${E("refine devtools")} failed to start. Port ${5001} is already in use, please make sure no other devtools server is running
`):console.error(`
${g.bold("\u2717 ")}${E("error from refine devtools")}`,r),process.exit(1)}).on("listening",()=>{console.log(`
${g.bold("\u2713 ")}${E("refine devtools")} is running at port ${g.bold(5001)}
`)});process.on("SIGTERM",()=>{t.close(()=>{})})};var oe={connectedApp:null,clientWs:null,devtoolsWsClients:[],appWsClients:[],activities:[],packages:[]},L=()=>({...oe});import{json as Te}from"express";import we from"lodash/uniq";import ae from"node-fetch";import se from"gray-matter";import{marked as A}from"marked";import R from"sanitize-html";var ce=e=>e.split("---section").slice(1).map(r=>`---section${r}`),le=e=>{let t=new A.Renderer;t.link=function(...n){return A.Renderer.prototype.link.apply(this,n).replace(/^<a/,'<a target="_blank" rel="noopener noreferrer"')};let r=A(e,{renderer:t});return R(r,{allowedTags:R.defaults.allowedTags.concat(["img"]),allowedAttributes:{...R.defaults.allowedAttributes,img:["src"]}})},de=e=>{let t=se(e.replace("---section","---"));return{...t.data,content:le(t.content)}},pe=async()=>{try{return(await ae(b)).text()}catch{return""}},j=async()=>{try{let e=await pe();return ce(e).map(de)}catch{return[]}};import ue from"fs";import me from"path";import fe from"globby";var C=async e=>{try{let t=await fe(`node_modules/${e}/package.json`,{onlyFiles:!0}),r=null;try{let n=u.resolve(me.join(e,"package.json"));n&&(r=n)}catch{}return[...t,...r?[r]:[]][0]??null}catch{return null}};var N=async e=>{try{let t=await C(e);if(!t)return null;let r=JSON.parse(ue.readFileSync(t,{encoding:"utf-8"}));return{name:r.name,version:r.version,description:r.description}}catch{return null}};import ve from"path";import{readJSON as ge}from"fs-extra";var P=async(e=process.cwd())=>{let t=await ge(ve.join(e,"package.json"),{encoding:"utf-8"});return Object.keys(t.dependencies).filter(n=>n.startsWith("@refinedev/"))};var V=e=>e.replace("@refinedev/","https://c.refine.dev/");var F=e=>"https://refine.dev/docs/api-reference/general-concepts/";var U=async e=>{try{let t=await P(e);return await Promise.all(t.map(async n=>{let s=await N(n);return{name:n,currentVersion:s==null?void 0:s.version,description:s==null?void 0:s.description,changelog:V(n),documentation:F(n)}}))}catch{return[]}};import l from"dedent";var Pe=[{name:"@refinedev/ably",description:"Ably integration for refine",install:"npm install @refinedev/ably",usage:l(`
            import { liveProvider, Ably } from "@refinedev/ably";

            export const ablyClient = new Ably.Realtime("YOUR_API_TOKEN");

            const App = () => {
                return (
                    <Refine
                        liveProvider={liveProvider(ablyClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
        `.trim())},{name:"@refinedev/airtable",description:"Airtable integration for refine",install:"npm install @refinedev/airtable",usage:l(`
            import dataProvider from "@refinedev/airtable";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_KEY", "BASE_ID")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/antd",description:"Ant Design integration for refine",install:"npm install @refinedev/antd antd",usage:l(`
            import { ThemedLayoutV2 } from "@refinedev/antd";

            import "@refinedev/antd/dist/reset.css";

            const App = () => {
                return (
                    <Refine
                        /* ... */
                    >
                        <ThemedLayoutV2>
                            {/* ... */}
                        </ThemedLayoutV2>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/appwrite",description:"Appwrite integration for refine",install:"npm install @refinedev/appwrite",usage:l(`
            import { dataProvider, liveProvider, Account, Appwrite, Storage } from "@refinedev/appwrite";

            const appwriteClient = new Appwrite();
            appwriteClient.setEndpoint("API_URL").setProject("PROJECT_ID");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(appwriteClient, { databaseId: "default" })}
                        liveProvider={liveProvider(appwriteClient, { databaseId: "default" })}
                        /* ... */
                    >
                        <ThemedLayout>
                            {/* ... */}
                        </ThemedLayout>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/chakra-ui",description:"Chakra UI integration for refine",install:"npm install @refinedev/chakra-ui @chakra-ui/react @emotion/react @emotion/styled framer-motion",usage:l(`
            import { ThemedLayoutV2 } from "@refinedev/chakra-ui";
            import { ChakraProvider } from "@chakra-ui/react";

            const App = () => {
                return (
                        <ChakraProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ChakraProvider>
                );
            };
            `.trim())},{name:"@refinedev/graphql",description:"GraphQL integration for refine",install:"npm install @refinedev/graphql",usage:l(`
            import dataProvider, { GraphQLClient } from "@refinedev/graphql";

            const client = new GraphQLClient("YOUR_API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/hasura",description:"GraphQL integration for refine",install:"npm install @refinedev/hasura",usage:l(`
            import dataProvider, { GraphQLClient } from "@refinedev/hasura";

            const client = new GraphQLClient("HASURA_API_URL", {
                headers: {
                    "x-hasura-role": "public",
                },
            });

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/inferencer",description:"Auto generate views based on your APIs with refine",install:"npm install @refinedev/inferencer",usage:l(`
        import { AntdInferencer } from "@refinedev/inferencer/antd";

        const App = () => {
            return (
                <Refine
                    /* ... */
                >
                    <AntdInferencer action="list" resource="posts" />
                </Refine>
            );
        };
        `.trim())},{name:"@refinedev/kbar",description:"Command palette integration with kbar for refine",install:"npm install @refinedev/kbar",usage:l(`
            import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";

            const App = () => {
                return (
                    <RefineKbarProvider>
                        <Refine
                            /* ... */
                        >
                            <RefineKbar />
                        </Refine>
                    </RefineKbarProvider>
                );
            };
        `.trim())},{name:"@refinedev/mantine",description:"Mantine UI integration for refine",install:"npm install @refinedev/mantine @refinedev/react-table @mantine/core @mantine/hooks @mantine/form @mantine/notifications @emotion/react @tabler/icons",usage:l(`
            import { ThemedLayoutV2 } from "@refinedev/mantine";
            import { MantineProvider } from "@mantine/core";

            const App = () => {
                return (
                    <MantineProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </MantineProvider>
                );
            };
            `.trim())},{name:"@refinedev/medusa",description:"Medusa store integration for refine",install:"npm install @refinedev/medusa",usage:l(`
            import dataProvider, { authProvider } from "@refinedev/medusa";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        authProvider={authProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/mui",description:"Material UI integration for refine",install:"npm install @refinedev/mui @refinedev/react-hook-form @mui/material @mui/lab @mui/x-data-grid @emotion/react @emotion/styled react-hook-form",usage:l(`
            import { ThemedLayoutV2 } from "@refinedev/mui";

            import CssBaseline from "@mui/material/CssBaseline";
            import GlobalStyles from "@mui/material/GlobalStyles";
            import { ThemeProvider } from "@mui/material/styles";

            const App = () => {
                return (
                    <ThemeProvider>
                        <CssBaseline />
                        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ThemeProvider>
                );
            };
            `.trim())},{name:"@refinedev/nestjs-query",description:"NestJS Query data provider integration for refine",install:"npm install @refinedev/nestjs-query graphql-ws",usage:l(`
            import dataProvider, {
                GraphQLClient,
                liveProvider,
            } from "@refinedev/nestjs-query";

            import { createClient } from "graphql-ws";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(new GraphQLClient( "API_URL" ))}
                        liveProvider={liveProvider(createClient({ url: "WS_URL" }))}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/nestjsx-crud",description:"NestJSX CRUD data provider integration for refine",install:"npm install @refinedev/nestjsx-crud",usage:l(`
            import dataProvider from "@refinedev/nestjsx-crud";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/react-hook-form",description:"React Hook Form integration for refine",install:"npm install @refinedev/react-hook-form react-hook-form",usage:l(`
            import { useForm } from "@refinedev/react-hook-form";

            const EditPost = () => {
                const {
                    register,
                    handleSubmit,
                    formState,
                    refineCore,
                } = useForm({
                    refineCoreProps: {
                        resource: "posts",
                        id: "1",
                    },
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/react-table",description:"Tanstack React Table integration for refine",install:"npm install @refinedev/react-table @tanstack/react-table",usage:l(`
            import { useTable } from "@refinedev/react-table";

            import { ColumnDef, flexRender } from "@tanstack/react-table";

            const EditPost = () => {
                const columns = React.useMemo<ColumnDef<IPost>[]>(
                    () => [
                        {
                            id: "id",
                            header: "ID",
                            accessorKey: "id",
                        },
                        {
                            id: "title",
                            header: "Title",
                            accessorKey: "title",
                            meta: {
                                filterOperator: "contains",
                            },
                        },
                ], []);

                const tableInstance = useTable({
                    columns,
                    refineCoreProps: {
                        resource: "posts",
                    }
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/simple-rest",description:"Data provider integration for REST APIs with refine",install:"npm install @refinedev/simple-rest",usage:l(`
            import dataProvider from "@refinedev/simple-rest";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/supabase",description:"Data provider and live provider integrations for Supabase with refine",install:"npm install @refinedev/supabase",usage:l(`
            import { dataProvider, liveProvider, createClient } from "@refinedev/supabase";

            const supabaseClient = createClient("SUPABASE_URL", "SUPABASE_KEY");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(supabaseClient)}
                        liveProvider={liveProvider(supabaseClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi",description:"Strapi integration of refine",install:"npm install @refinedev/strapi axios",usage:l(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi-v4",description:"StrapiV4 integration of refine",install:"npm install @refinedev/strapi-v4 axios",usage:l(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi-v4";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())}],$=async e=>{let t=await P(e);return Pe.filter(r=>!t.includes(r.name))};import he from"preferred-pm";import ye from"execa";var H=async(e,t=process.cwd())=>{try{let{name:r}=await he(t)??{name:"npm"},{failed:n}=await ye(r??"npm",["install",...e.map(s=>`${s}@latest`)]);return!n}catch{return!1}};import _e from"execa";var M=async e=>{try{let{stdout:t}=await _e("npm",["view",e,"name","version","--json"]);return JSON.parse(t)}catch{return{name:e}}};import{readJSON as Ee}from"fs-extra";import Ae from"path";var h=async(e=process.cwd())=>{var t;try{let r=await Ee(Ae.join(e,"package.json"),{encoding:"utf-8"}),n=(t=r==null?void 0:r.refine)==null?void 0:t.projectId;return n||!1}catch{return null}};import Re from"execa";var W=async(e,t=process.cwd())=>{try{return Re.sync("npm",["pkg","set",`refine.projectId=${e}`],{cwd:t}),!0}catch{return null}};import ke from"execa";import J from"path";var G=async(e,t=process.cwd())=>{try{let r=u.resolve(".bin/jscodeshift"),n=ke.sync(r,["./","--extensions=ts,tsx,js,jsx","--parser=tsx",`--transform=${J.resolve(J.join(__dirname,"..","src","project-id","transform.ts"))}`,"--ignore-pattern=**/.cache/**","--ignore-pattern=**/node_modules/**","--ignore-pattern=**/build/**","--ignore-pattern=**/dist/**","--ignore-pattern=**/.next/**",`--__projectId=${e}`],{cwd:t,timeout:1e3*10});n.stderr&&console.error(n.stderr)}catch(r){console.error(r)}};var q=async(e,t=process.cwd())=>{try{return await Promise.all([W(e,t),G(e,t)]),!0}catch{return!1}};var B=(e,t)=>{e.use("/api",Te()),e.get("/api/connected-app",(a,i)=>{i.json({url:t.connectedApp})}),e.get("/api/activities",(a,i)=>{let{offset:c=0,limit:d=t.activities.length}=a.query;i.setHeader("x-total-count",t.activities.length),i.json({data:t.activities.slice(Number(c),Number(d))})}),e.get("/api/activities/reset",(a,i)=>{t.activities=[],i.json({success:!0})}),e.get("/api/unique-trace-items",(a,i)=>{i.header("Access-Control-Allow-Origin","*"),i.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");let c=t.activities.flatMap(X=>{var k;return((k=X.trace)==null?void 0:k.map(Z=>Z.function).filter(Boolean))??[]}),d=we(c);i.setHeader("x-total-count",d.length),i.json({data:d})});let r=null;e.get("/api/installed-packages",async(a,i)=>{let{force:c}=a.query??{};(!r||c)&&(r=await U()),i.header("x-total-count",`${r.length}`),i.json({data:r})});let n=null;e.get("/api/available-packages",async(a,i)=>{n||(n=await $()),i.header("x-total-count",`${n.length}`),i.json({data:n})});let s=new Map;e.get("/api/packages/:packageName/latest",async(a,i)=>{let{packageName:c}=a.params??{};if(!c){i.status(400).json({error:"Package name is required"});return}if(!s.has(c)){let d=await M(c);s.set(c,d)}return i.json({data:s.get(c)})}),e.post("/api/packages/install",async(a,i)=>{let{packages:c}=a.body??{};if((c==null?void 0:c.length)===0){i.status(400).json({error:"Package name is required"});return}await H(c)?(r=null,n=null,i.status(200).json({success:!0})):i.status(400).json({success:!1,error:"Failed to update package"})});let o=null;e.get("/api/feed",async(a,i)=>{o||(o=await j()),i.header("x-total-count",`${o.length}`),i.json({data:o})}),e.get("/api/project-id/status",async(a,i)=>{let c=await h();if(c){i.status(200).json({projectId:c});return}if(c===!1){i.status(404).json({projectId:null});return}i.status(500).json({projectId:null})}),e.post("/api/project-id/update",async(a,i)=>{let{projectId:c}=a.body??{};if(!c){i.status(400).json({error:"Project ID is required"});return}if(await q(c)){i.status(200).json({success:!0});return}i.status(500).json({success:!1,error:"Failed to update project ID"})})};import{readJSON as be,writeJSON as Oe}from"fs-extra";import{FrontendApi as Se}from"@ory/client";import{createProxyMiddleware as K}from"http-proxy-middleware";import Q from"path";var y=null,Ie=async(e,t,r)=>{y||(y=await h()),y&&(e.headers["x-project-id"]=y),r()},xe=(e,t)=>{if(t.body){let r=JSON.stringify(t.body);e.setHeader("Content-Type","application/json"),e.setHeader("Content-Length",Buffer.byteLength(r)),e.write(r)}},De=async e=>{try{let t=`${v}/.auth`,r=new Se({isJsonMime:()=>!0,basePath:t,baseOptions:{withCredentials:!0}}),{data:n}=await r.toSession({xSessionToken:e,tokenizeAs:"jwt_template_1"});return n==null?void 0:n.tokenized}catch{}},Le=async(e,t)=>{try{Oe(Q.join(__dirname,"..",".persist.json"),{token:e,jwt:t})}catch{}},je=async()=>{try{return await be(Q.join(__dirname,"..",".persist.json"))}catch{}return{token:void 0,jwt:void 0}},Ce=e=>(t,r)=>{if(r.url.includes("self-service/logout/api")){let n=JSON.stringify({session_token:e});t.setHeader("Content-Length",Buffer.byteLength(n)),t.write(n)}},Ne=e=>(t,r,n)=>{let s="";t.on("data",o=>{s+=o}),t.on("end",()=>{var a;let o;try{o=JSON.parse(s).session_token}catch{}if(!o){if((a=s==null?void 0:s.includes)!=null&&a.call(s,"an+account+with+the+same+identifier")){n.redirect("/after-login?error=An+account+with+the+same+identifier+exists+already");return}n.redirect("/after-login?error=Invalid-session-token");return}De(o).then(i=>{e(o,i??""),n.redirect("/after-login")})})},Y=async e=>{let{token:t,jwt:r}=await je(),n=K({target:v,changeOrigin:!0,pathRewrite:{"^/api/.auth":"/.auth"},cookieDomainRewrite:{"refine.dev":""},logLevel:"silent",headers:{"auth-base-url-rewrite":`http://localhost:${5001}/api/.auth`},selfHandleResponse:!0,onProxyReq:(o,a,...i)=>{t&&(o.setHeader("X-Session-Token",t??""),Ce(t)(o,a,...i))},onProxyRes:(o,a,i)=>{if(a.url.includes("self-service/methods/oidc/callback"))return Ne((c,d)=>{t=c,r=d,Le(t,r)})(o,a,i);i.writeHead(o.statusCode||500,o.headers),o.pipe(i,{end:!0})}});e.use("/api/.auth",n);let s=K({target:v,secure:!1,changeOrigin:!0,logLevel:"silent",pathRewrite:{"^/api/.refine":"/.refine"},onProxyReq:(o,...a)=>{r&&(o.setHeader("Authorization",`Bearer ${r}`),o.removeHeader("cookie")),xe(o,...a)}});e.use("/api/.refine",Ie,s)};import Ve from"path";var z=(e,t)=>{e.get("/open-in-editor/*",(r,n)=>{let{line:s,column:o}=r.query,a=r.path.replace("/open-in-editor",""),i=`vscode://file/${Ve.join(t,a)}?${s?`line=${s}`:""}${o?`&column=${o}`:""}`;n.redirect(i)})};var Tr=async({projectPath:e=process.cwd()}={})=>{let t=Fe(),r=I(),n=L();r.on("connection",s=>{_(s,p.DEVTOOLS_INIT,o=>{n.connectedApp?m(s,p.DEVTOOLS_ALREADY_CONNECTED,{url:n.connectedApp}):(n.connectedApp=o.url,n.clientWs=s,r.clients.forEach(a=>{m(a,p.DEVTOOLS_CONNECTED_APP,{url:n.connectedApp})}))}),_(s,p.ACTIVITY,o=>{let a=n.activities.findIndex(c=>c.identifier===o.identifier),i={...o,createdAt:Date.now(),updatedAt:Date.now()};a>-1?(i.createdAt=n.activities[a].createdAt,n.activities[a]=i):n.activities.push(i),r.clients.forEach(c=>{m(c,p.DEVTOOLS_ACTIVITY_UPDATE,{updatedActivities:[i]})})}),_(s,p.DEVTOOLS_HIGHLIGHT_IN_MONITOR,({name:o})=>{r.clients.forEach(a=>{m(a,p.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION,{name:o})})}),_(s,p.DEVTOOLS_LOGIN_SUCCESS,()=>{r.clients.forEach(o=>{m(o,p.DEVTOOLS_RELOAD_AFTER_LOGIN,{})})}),s.on("close",(o,a)=>{n.clientWs&&(r.clients.has(n.clientWs)||(n.clientWs=null,n.connectedApp=null,n.activities=[],r.clients.forEach(i=>{m(i,p.DEVTOOLS_DISCONNECTED_APP,{url:n.connectedApp})})))})}),x(r),w(t),D(t),B(t,n),Y(t),z(t,e)};export{Tr as server};
//# sourceMappingURL=index.js.map