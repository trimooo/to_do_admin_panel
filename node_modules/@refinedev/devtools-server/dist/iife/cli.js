#!/usr/bin/env node
(()=>{var xe=Object.create;var C=Object.defineProperty;var Ce=Object.getOwnPropertyDescriptor;var je=Object.getOwnPropertyNames;var Ne=Object.getPrototypeOf,Ve=Object.prototype.hasOwnProperty;var c=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var Ue=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var Fe=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of je(t))!Ve.call(e,i)&&i!==r&&C(e,i,{get:()=>t[i],enumerable:!(n=Ce(t,i))||n.enumerable});return e};var d=(e,t,r)=>(r=e!=null?xe(Ne(e)):{},Fe(t||!e||!e.__esModule?C(r,"default",{value:e,enumerable:!0}):r,e));var y=Ue((pt,$)=>{"use client";var Me=Object.create,_=Object.defineProperty,He=Object.getOwnPropertyDescriptor,$e=Object.getOwnPropertyNames,We=Object.getPrototypeOf,Ge=Object.prototype.hasOwnProperty,Je=(e,t)=>{for(var r in t)_(e,r,{get:t[r],enumerable:!0})},j=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of $e(t))!Ge.call(e,i)&&i!==r&&_(e,i,{get:()=>t[i],enumerable:!(n=He(t,i))||n.enumerable});return e},qe=(e,t,r)=>(r=e!=null?Me(We(e)):{},j(t||!e||!e.__esModule?_(r,"default",{value:e,enumerable:!0}):r,e)),Be=e=>j(_({},"__esModule",{value:!0}),e),N={};Je(N,{DevToolsContext:()=>H,DevToolsContextProvider:()=>Ye,DevtoolsEvent:()=>V,hooksByScope:()=>Ke,receive:()=>M,scopes:()=>U,send:()=>F});$.exports=Be(N);var V=(e=>(e.RELOAD="devtools:reload",e.DEVTOOLS_INIT="devtools:init",e.DEVTOOLS_HANDSHAKE="devtools:handshake",e.DEVTOOLS_ALREADY_CONNECTED="devtools:already-connected",e.ACTIVITY="devtools:send-activity",e.DEVTOOLS_ACTIVITY_UPDATE="devtools:activity-update",e.DEVTOOLS_CONNECTED_APP="devtools:connected-app",e.DEVTOOLS_DISCONNECTED_APP="devtools:disconnected-app",e.DEVTOOLS_HIGHLIGHT_IN_MONITOR="devtools:highlight-in-monitor",e.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION="devtools:highlight-in-monitor-action",e.DEVTOOLS_LOGIN_SUCCESS="devtools:login-success",e.DEVTOOLS_RELOAD_AFTER_LOGIN="devtools:reload-after-login",e))(V||{}),U={useCan:"access-control",useLog:"audit-log",useLogList:"audit-log",useCreate:"data",useCreateMany:"data",useCustom:"data",useCustomMutation:"data",useDelete:"data",useDeleteMany:"data",useInfiniteList:"data",useList:"data",useMany:"data",useOne:"data",useUpdate:"data",useUpdateMany:"data",useForgotPassword:"auth",useGetIdentity:"auth",useIsAuthenticated:"auth",useLogin:"auth",useLogout:"auth",useOnError:"auth",usePermissions:"auth",useRegister:"auth",useUpdatePassword:"auth"},Ke=Object.entries(U).reduce((e,[t,r])=>(e[r]||(e[r]=[]),e[r].push(t),e),{}),v=qe(c("react"));async function F(e,t,r){if(e.readyState!==e.OPEN){await new Promise(n=>{let i=()=>{e.send(JSON.stringify({event:t,payload:r})),n(),e.removeEventListener("open",i)};e.addEventListener("open",i)});return}e.send(JSON.stringify({event:t,payload:r}))}function M(e,t,r){let n=i=>{let{event:a,payload:s}=JSON.parse(i.data);t===a&&r(s)};return e.addEventListener("message",n),()=>{e.removeEventListener("message",n)}}var H=v.default.createContext({__devtools:!1,port:5002,url:"localhost",secure:!1,ws:null}),Ye=({__devtools:e,port:t,children:r})=>{let[n,i]=v.default.useState({__devtools:e??!1,port:t??5002,url:"localhost",secure:!1,ws:null}),[a,s]=v.default.useState(null);v.default.useEffect(()=>{let l=new WebSocket(`${n.secure?"wss":"ws"}://localhost:${n.port}`),u=M(l,"devtools:handshake",k=>{i(P=>({...P,devtoolsUrl:k.url})),u()});return l.addEventListener("open",()=>{n.__devtools||F(l,"devtools:init",{url:window.location.origin})}),s(l),()=>{u(),l.close(1e3,window.location.origin)}},[]);let o=v.default.useMemo(()=>({...n,ws:a}),[n,a]);return v.default.createElement(H.Provider,{value:o},r)}});var Le=d(c("express")),p=d(y());var W=d(c("express")),L=d(c("path")),G=e=>{e.use(W.default.static(L.default.join(__dirname,"client"))),e.use((t,r,n)=>{if(t.path.startsWith("/api")||t.path.startsWith("/open-in-editor"))return n();r.status(200).sendFile(L.default.join(`${__dirname}/client/index.html`))})};var q=d(c("ws"));var E="https://cloud2.refine.dev",J="https://raw.githubusercontent.com/refinedev/refine/master/packages/devtools-server/FEED.md";var A=d(y()),g=c("chalk"),B=()=>{let e=new q.default.Server({port:5002}).on("error",t=>{(t==null?void 0:t.code)==="EADDRINUSE"?console.error(`
${g.cyanBright.bold("\u2717 ")}${(0,g.bold)("refine devtools")} failed to start. Port ${5002} is already in use, please make sure no other devtools server is running
`):console.error(`
${g.cyanBright.bold("\u2717 ")}${(0,g.bold)("error from refine devtools")}`,t),process.exit(1)});return e.on("connection",t=>{(0,A.send)(t,A.DevtoolsEvent.DEVTOOLS_HANDSHAKE,{url:`http://localhost:${5001}`}),t.on("close",()=>{t.terminate()})}),process.on("SIGTERM",()=>{e.close(()=>{})}),e};var vt=c("lodash"),ht=d(y()),yt=c("ws"),K=()=>0;var f=c("chalk"),Y=e=>{let t=e.listen(5001,()=>{}).on("error",r=>{(r==null?void 0:r.code)==="EADDRINUSE"?console.error(`
${f.cyanBright.bold("\u2717 ")}${(0,f.bold)("refine devtools")} failed to start. Port ${5001} is already in use, please make sure no other devtools server is running
`):console.error(`
${f.cyanBright.bold("\u2717 ")}${(0,f.bold)("error from refine devtools")}`,r),process.exit(1)}).on("listening",()=>{console.log(`
${f.cyanBright.bold("\u2713 ")}${(0,f.bold)("refine devtools")} is running at port ${f.cyanBright.bold(5001)}
`)});process.on("SIGTERM",()=>{t.close(()=>{})})};var ze={connectedApp:null,clientWs:null,devtoolsWsClients:[],appWsClients:[],activities:[],packages:[]},Q=()=>({...ze});var Oe=c("express"),Te=d(c("lodash/uniq"));var z=d(c("node-fetch")),X=d(c("gray-matter")),O=c("marked"),T=d(c("sanitize-html"));var Xe=e=>e.split("---section").slice(1).map(r=>`---section${r}`),Ze=e=>{let t=new O.marked.Renderer;t.link=function(...n){return O.marked.Renderer.prototype.link.apply(this,n).replace(/^<a/,'<a target="_blank" rel="noopener noreferrer"')};let r=(0,O.marked)(e,{renderer:t});return(0,T.default)(r,{allowedTags:T.default.defaults.allowedTags.concat(["img"]),allowedAttributes:{...T.default.defaults.allowedAttributes,img:["src"]}})},et=e=>{let t=(0,X.default)(e.replace("---section","---"));return{...t.data,content:Ze(t.content)}},tt=async()=>{try{return(await(0,z.default)(J)).text()}catch{return""}},Z=async()=>{try{let e=await tt();return Xe(e).map(et)}catch{return[]}};var ne=d(c("fs"));var ee=d(c("path")),te=d(c("globby"));var re=async e=>{try{let t=await(0,te.default)(`node_modules/${e}/package.json`,{onlyFiles:!0}),r=null;try{let n=c.resolve(ee.default.join(e,"package.json"));n&&(r=n)}catch{}return[...t,...r?[r]:[]][0]??null}catch{return null}};var oe=async e=>{try{let t=await re(e);if(!t)return null;let r=JSON.parse(ne.default.readFileSync(t,{encoding:"utf-8"}));return{name:r.name,version:r.version,description:r.description}}catch{return null}};var ie=d(c("path")),ae=c("fs-extra"),R=async(e=process.cwd())=>{let t=await(0,ae.readJSON)(ie.default.join(e,"package.json"),{encoding:"utf-8"});return Object.keys(t.dependencies).filter(n=>n.startsWith("@refinedev/"))};var se=e=>e.replace("@refinedev/","https://c.refine.dev/");var ce=e=>"https://refine.dev/docs/api-reference/general-concepts/";var le=async e=>{try{let t=await R(e);return await Promise.all(t.map(async n=>{let i=await oe(n);return{name:n,currentVersion:i==null?void 0:i.version,description:i==null?void 0:i.description,changelog:se(n),documentation:ce(n)}}))}catch{return[]}};var m=d(c("dedent"));var rt=[{name:"@refinedev/ably",description:"Ably integration for refine",install:"npm install @refinedev/ably",usage:(0,m.default)(`
            import { liveProvider, Ably } from "@refinedev/ably";

            export const ablyClient = new Ably.Realtime("YOUR_API_TOKEN");

            const App = () => {
                return (
                    <Refine
                        liveProvider={liveProvider(ablyClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
        `.trim())},{name:"@refinedev/airtable",description:"Airtable integration for refine",install:"npm install @refinedev/airtable",usage:(0,m.default)(`
            import dataProvider from "@refinedev/airtable";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_KEY", "BASE_ID")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/antd",description:"Ant Design integration for refine",install:"npm install @refinedev/antd antd",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/antd";

            import "@refinedev/antd/dist/reset.css";

            const App = () => {
                return (
                    <Refine
                        /* ... */
                    >
                        <ThemedLayoutV2>
                            {/* ... */}
                        </ThemedLayoutV2>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/appwrite",description:"Appwrite integration for refine",install:"npm install @refinedev/appwrite",usage:(0,m.default)(`
            import { dataProvider, liveProvider, Account, Appwrite, Storage } from "@refinedev/appwrite";

            const appwriteClient = new Appwrite();
            appwriteClient.setEndpoint("API_URL").setProject("PROJECT_ID");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(appwriteClient, { databaseId: "default" })}
                        liveProvider={liveProvider(appwriteClient, { databaseId: "default" })}
                        /* ... */
                    >
                        <ThemedLayout>
                            {/* ... */}
                        </ThemedLayout>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/chakra-ui",description:"Chakra UI integration for refine",install:"npm install @refinedev/chakra-ui @chakra-ui/react @emotion/react @emotion/styled framer-motion",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/chakra-ui";
            import { ChakraProvider } from "@chakra-ui/react";

            const App = () => {
                return (
                        <ChakraProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ChakraProvider>
                );
            };
            `.trim())},{name:"@refinedev/graphql",description:"GraphQL integration for refine",install:"npm install @refinedev/graphql",usage:(0,m.default)(`
            import dataProvider, { GraphQLClient } from "@refinedev/graphql";

            const client = new GraphQLClient("YOUR_API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/hasura",description:"GraphQL integration for refine",install:"npm install @refinedev/hasura",usage:(0,m.default)(`
            import dataProvider, { GraphQLClient } from "@refinedev/hasura";

            const client = new GraphQLClient("HASURA_API_URL", {
                headers: {
                    "x-hasura-role": "public",
                },
            });

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/inferencer",description:"Auto generate views based on your APIs with refine",install:"npm install @refinedev/inferencer",usage:(0,m.default)(`
        import { AntdInferencer } from "@refinedev/inferencer/antd";

        const App = () => {
            return (
                <Refine
                    /* ... */
                >
                    <AntdInferencer action="list" resource="posts" />
                </Refine>
            );
        };
        `.trim())},{name:"@refinedev/kbar",description:"Command palette integration with kbar for refine",install:"npm install @refinedev/kbar",usage:(0,m.default)(`
            import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";

            const App = () => {
                return (
                    <RefineKbarProvider>
                        <Refine
                            /* ... */
                        >
                            <RefineKbar />
                        </Refine>
                    </RefineKbarProvider>
                );
            };
        `.trim())},{name:"@refinedev/mantine",description:"Mantine UI integration for refine",install:"npm install @refinedev/mantine @refinedev/react-table @mantine/core @mantine/hooks @mantine/form @mantine/notifications @emotion/react @tabler/icons",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/mantine";
            import { MantineProvider } from "@mantine/core";

            const App = () => {
                return (
                    <MantineProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </MantineProvider>
                );
            };
            `.trim())},{name:"@refinedev/medusa",description:"Medusa store integration for refine",install:"npm install @refinedev/medusa",usage:(0,m.default)(`
            import dataProvider, { authProvider } from "@refinedev/medusa";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        authProvider={authProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/mui",description:"Material UI integration for refine",install:"npm install @refinedev/mui @refinedev/react-hook-form @mui/material @mui/lab @mui/x-data-grid @emotion/react @emotion/styled react-hook-form",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/mui";

            import CssBaseline from "@mui/material/CssBaseline";
            import GlobalStyles from "@mui/material/GlobalStyles";
            import { ThemeProvider } from "@mui/material/styles";

            const App = () => {
                return (
                    <ThemeProvider>
                        <CssBaseline />
                        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ThemeProvider>
                );
            };
            `.trim())},{name:"@refinedev/nestjs-query",description:"NestJS Query data provider integration for refine",install:"npm install @refinedev/nestjs-query graphql-ws",usage:(0,m.default)(`
            import dataProvider, {
                GraphQLClient,
                liveProvider,
            } from "@refinedev/nestjs-query";

            import { createClient } from "graphql-ws";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(new GraphQLClient( "API_URL" ))}
                        liveProvider={liveProvider(createClient({ url: "WS_URL" }))}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/nestjsx-crud",description:"NestJSX CRUD data provider integration for refine",install:"npm install @refinedev/nestjsx-crud",usage:(0,m.default)(`
            import dataProvider from "@refinedev/nestjsx-crud";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/react-hook-form",description:"React Hook Form integration for refine",install:"npm install @refinedev/react-hook-form react-hook-form",usage:(0,m.default)(`
            import { useForm } from "@refinedev/react-hook-form";

            const EditPost = () => {
                const {
                    register,
                    handleSubmit,
                    formState,
                    refineCore,
                } = useForm({
                    refineCoreProps: {
                        resource: "posts",
                        id: "1",
                    },
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/react-table",description:"Tanstack React Table integration for refine",install:"npm install @refinedev/react-table @tanstack/react-table",usage:(0,m.default)(`
            import { useTable } from "@refinedev/react-table";

            import { ColumnDef, flexRender } from "@tanstack/react-table";

            const EditPost = () => {
                const columns = React.useMemo<ColumnDef<IPost>[]>(
                    () => [
                        {
                            id: "id",
                            header: "ID",
                            accessorKey: "id",
                        },
                        {
                            id: "title",
                            header: "Title",
                            accessorKey: "title",
                            meta: {
                                filterOperator: "contains",
                            },
                        },
                ], []);

                const tableInstance = useTable({
                    columns,
                    refineCoreProps: {
                        resource: "posts",
                    }
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/simple-rest",description:"Data provider integration for REST APIs with refine",install:"npm install @refinedev/simple-rest",usage:(0,m.default)(`
            import dataProvider from "@refinedev/simple-rest";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/supabase",description:"Data provider and live provider integrations for Supabase with refine",install:"npm install @refinedev/supabase",usage:(0,m.default)(`
            import { dataProvider, liveProvider, createClient } from "@refinedev/supabase";

            const supabaseClient = createClient("SUPABASE_URL", "SUPABASE_KEY");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(supabaseClient)}
                        liveProvider={liveProvider(supabaseClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi",description:"Strapi integration of refine",install:"npm install @refinedev/strapi axios",usage:(0,m.default)(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi-v4",description:"StrapiV4 integration of refine",install:"npm install @refinedev/strapi-v4 axios",usage:(0,m.default)(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi-v4";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())}],de=async e=>{let t=await R(e);return rt.filter(r=>!t.includes(r.name))};var pe=d(c("preferred-pm")),me=d(c("execa")),ue=async(e,t=process.cwd())=>{try{let{name:r}=await(0,pe.default)(t)??{name:"npm"},{failed:n}=await(0,me.default)(r??"npm",["install",...e.map(i=>`${i}@latest`)]);return!n}catch{return!1}};var fe=d(c("execa")),ve=async e=>{try{let{stdout:t}=await(0,fe.default)("npm",["view",e,"name","version","--json"]);return JSON.parse(t)}catch{return{name:e}}};var ge=c("fs-extra"),he=d(c("path")),w=async(e=process.cwd())=>{var t;try{let r=await(0,ge.readJSON)(he.default.join(e,"package.json"),{encoding:"utf-8"}),n=(t=r==null?void 0:r.refine)==null?void 0:t.projectId;return n||!1}catch{return null}};var Pe=d(c("execa")),_e=async(e,t=process.cwd())=>{try{return Pe.default.sync("npm",["pkg","set",`refine.projectId=${e}`],{cwd:t}),!0}catch{return null}};var ye=d(c("execa")),I=d(c("path"));var Ee=async(e,t=process.cwd())=>{try{let r=c.resolve(".bin/jscodeshift"),n=ye.default.sync(r,["./","--extensions=ts,tsx,js,jsx","--parser=tsx",`--transform=${I.default.resolve(I.default.join(__dirname,"..","src","project-id","transform.ts"))}`,"--ignore-pattern=**/.cache/**","--ignore-pattern=**/node_modules/**","--ignore-pattern=**/build/**","--ignore-pattern=**/dist/**","--ignore-pattern=**/.next/**",`--__projectId=${e}`],{cwd:t,timeout:1e3*10});n.stderr&&console.error(n.stderr)}catch(r){console.error(r)}};var Ae=async(e,t=process.cwd())=>{try{return await Promise.all([_e(e,t),Ee(e,t)]),!0}catch{return!1}};var Re=(e,t)=>{e.use("/api",(0,Oe.json)()),e.get("/api/connected-app",(s,o)=>{o.json({url:t.connectedApp})}),e.get("/api/activities",(s,o)=>{let{offset:l=0,limit:u=t.activities.length}=s.query;o.setHeader("x-total-count",t.activities.length),o.json({data:t.activities.slice(Number(l),Number(u))})}),e.get("/api/activities/reset",(s,o)=>{t.activities=[],o.json({success:!0})}),e.get("/api/unique-trace-items",(s,o)=>{o.header("Access-Control-Allow-Origin","*"),o.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");let l=t.activities.flatMap(k=>{var P;return((P=k.trace)==null?void 0:P.map(De=>De.function).filter(Boolean))??[]}),u=(0,Te.default)(l);o.setHeader("x-total-count",u.length),o.json({data:u})});let r=null;e.get("/api/installed-packages",async(s,o)=>{let{force:l}=s.query??{};(!r||l)&&(r=await le()),o.header("x-total-count",`${r.length}`),o.json({data:r})});let n=null;e.get("/api/available-packages",async(s,o)=>{n||(n=await de()),o.header("x-total-count",`${n.length}`),o.json({data:n})});let i=new Map;e.get("/api/packages/:packageName/latest",async(s,o)=>{let{packageName:l}=s.params??{};if(!l){o.status(400).json({error:"Package name is required"});return}if(!i.has(l)){let u=await ve(l);i.set(l,u)}return o.json({data:i.get(l)})}),e.post("/api/packages/install",async(s,o)=>{let{packages:l}=s.body??{};if((l==null?void 0:l.length)===0){o.status(400).json({error:"Package name is required"});return}await ue(l)?(r=null,n=null,o.status(200).json({success:!0})):o.status(400).json({success:!1,error:"Failed to update package"})});let a=null;e.get("/api/feed",async(s,o)=>{a||(a=await Z()),o.header("x-total-count",`${a.length}`),o.json({data:a})}),e.get("/api/project-id/status",async(s,o)=>{let l=await w();if(l){o.status(200).json({projectId:l});return}if(l===!1){o.status(404).json({projectId:null});return}o.status(500).json({projectId:null})}),e.post("/api/project-id/update",async(s,o)=>{let{projectId:l}=s.body??{};if(!l){o.status(400).json({error:"Project ID is required"});return}if(await Ae(l)){o.status(200).json({success:!0});return}o.status(500).json({success:!1,error:"Failed to update project ID"})})};var b=c("fs-extra"),we=c("@ory/client"),D=c("http-proxy-middleware"),x=d(c("path"));var S=null,nt=async(e,t,r)=>{S||(S=await w()),S&&(e.headers["x-project-id"]=S),r()},ot=(e,t)=>{if(t.body){let r=JSON.stringify(t.body);e.setHeader("Content-Type","application/json"),e.setHeader("Content-Length",Buffer.byteLength(r)),e.write(r)}},it=async e=>{try{let t=`${E}/.auth`,r=new we.FrontendApi({isJsonMime:()=>!0,basePath:t,baseOptions:{withCredentials:!0}}),{data:n}=await r.toSession({xSessionToken:e,tokenizeAs:"jwt_template_1"});return n==null?void 0:n.tokenized}catch{}},at=async(e,t)=>{try{(0,b.writeJSON)(x.default.join(__dirname,"..",".persist.json"),{token:e,jwt:t})}catch{}},st=async()=>{try{return await(0,b.readJSON)(x.default.join(__dirname,"..",".persist.json"))}catch{}return{token:void 0,jwt:void 0}},ct=e=>(t,r)=>{if(r.url.includes("self-service/logout/api")){let n=JSON.stringify({session_token:e});t.setHeader("Content-Length",Buffer.byteLength(n)),t.write(n)}},lt=e=>(t,r,n)=>{let i="";t.on("data",a=>{i+=a}),t.on("end",()=>{var s;let a;try{a=JSON.parse(i).session_token}catch{}if(!a){if((s=i==null?void 0:i.includes)!=null&&s.call(i,"an+account+with+the+same+identifier")){n.redirect("/after-login?error=An+account+with+the+same+identifier+exists+already");return}n.redirect("/after-login?error=Invalid-session-token");return}it(a).then(o=>{e(a,o??""),n.redirect("/after-login")})})},Se=async e=>{let{token:t,jwt:r}=await st(),n=(0,D.createProxyMiddleware)({target:E,changeOrigin:!0,pathRewrite:{"^/api/.auth":"/.auth"},cookieDomainRewrite:{"refine.dev":""},logLevel:"silent",headers:{"auth-base-url-rewrite":`http://localhost:${5001}/api/.auth`},selfHandleResponse:!0,onProxyReq:(a,s,...o)=>{t&&(a.setHeader("X-Session-Token",t??""),ct(t)(a,s,...o))},onProxyRes:(a,s,o)=>{if(s.url.includes("self-service/methods/oidc/callback"))return lt((l,u)=>{t=l,r=u,at(t,r)})(a,s,o);o.writeHead(a.statusCode||500,a.headers),a.pipe(o,{end:!0})}});e.use("/api/.auth",n);let i=(0,D.createProxyMiddleware)({target:E,secure:!1,changeOrigin:!0,logLevel:"silent",pathRewrite:{"^/api/.refine":"/.refine"},onProxyReq:(a,...s)=>{r&&(a.setHeader("Authorization",`Bearer ${r}`),a.removeHeader("cookie")),ot(a,...s)}});e.use("/api/.refine",nt,i)};var be=d(c("path")),ke=(e,t)=>{e.get("/open-in-editor/*",(r,n)=>{let{line:i,column:a}=r.query,s=r.path.replace("/open-in-editor",""),o=`vscode://file/${be.default.join(t,s)}?${i?`line=${i}`:""}${a?`&column=${a}`:""}`;n.redirect(o)})};var Ie=async({projectPath:e=process.cwd()}={})=>{let t=(0,Le.default)(),r=B(),n=Q();r.on("connection",i=>{(0,p.receive)(i,p.DevtoolsEvent.DEVTOOLS_INIT,a=>{n.connectedApp?(0,p.send)(i,p.DevtoolsEvent.DEVTOOLS_ALREADY_CONNECTED,{url:n.connectedApp}):(n.connectedApp=a.url,n.clientWs=i,r.clients.forEach(s=>{(0,p.send)(s,p.DevtoolsEvent.DEVTOOLS_CONNECTED_APP,{url:n.connectedApp})}))}),(0,p.receive)(i,p.DevtoolsEvent.ACTIVITY,a=>{let s=n.activities.findIndex(l=>l.identifier===a.identifier),o={...a,createdAt:Date.now(),updatedAt:Date.now()};s>-1?(o.createdAt=n.activities[s].createdAt,n.activities[s]=o):n.activities.push(o),r.clients.forEach(l=>{(0,p.send)(l,p.DevtoolsEvent.DEVTOOLS_ACTIVITY_UPDATE,{updatedActivities:[o]})})}),(0,p.receive)(i,p.DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR,({name:a})=>{r.clients.forEach(s=>{(0,p.send)(s,p.DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION,{name:a})})}),(0,p.receive)(i,p.DevtoolsEvent.DEVTOOLS_LOGIN_SUCCESS,()=>{r.clients.forEach(a=>{(0,p.send)(a,p.DevtoolsEvent.DEVTOOLS_RELOAD_AFTER_LOGIN,{})})}),i.on("close",(a,s)=>{n.clientWs&&(r.clients.has(n.clientWs)||(n.clientWs=null,n.connectedApp=null,n.activities=[],r.clients.forEach(o=>{(0,p.send)(o,p.DevtoolsEvent.DEVTOOLS_DISCONNECTED_APP,{url:n.connectedApp})})))})}),K(r),G(t),Y(t),Re(t,n),Se(t),ke(t,e)};Ie();})();
//# sourceMappingURL=cli.js.map