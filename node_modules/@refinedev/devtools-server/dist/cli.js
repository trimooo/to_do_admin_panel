#!/usr/bin/env node
var Ee=Object.create;var S=Object.defineProperty;var Ae=Object.getOwnPropertyDescriptor;var Re=Object.getOwnPropertyNames;var ke=Object.getPrototypeOf,Te=Object.prototype.hasOwnProperty;var we=(t,e,r,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of Re(e))!Te.call(t,o)&&o!==r&&S(t,o,{get:()=>e[o],enumerable:!(n=Ae(e,o))||n.enumerable});return t};var l=(t,e,r)=>(r=t!=null?Ee(ke(t)):{},we(e||!t||!t.__esModule?S(r,"default",{value:t,enumerable:!0}):r,t));var Pe=l(require("express")),d=require("@refinedev/devtools-shared");var I=l(require("express")),k=l(require("path")),x=t=>{t.use(I.default.static(k.default.join(__dirname,"client"))),t.use((e,r,n)=>{if(e.path.startsWith("/api")||e.path.startsWith("/open-in-editor"))return n();r.status(200).sendFile(k.default.join(`${__dirname}/client/index.html`))})};var L=l(require("ws"));var g="https://cloud2.refine.dev",D="https://raw.githubusercontent.com/refinedev/refine/master/packages/devtools-server/FEED.md";var P=require("@refinedev/devtools-shared"),u=require("chalk"),j=()=>{let t=new L.default.Server({port:5002}).on("error",e=>{(e==null?void 0:e.code)==="EADDRINUSE"?console.error(`
${u.cyanBright.bold("\u2717 ")}${(0,u.bold)("refine devtools")} failed to start. Port ${5002} is already in use, please make sure no other devtools server is running
`):console.error(`
${u.cyanBright.bold("\u2717 ")}${(0,u.bold)("error from refine devtools")}`,e),process.exit(1)});return t.on("connection",e=>{(0,P.send)(e,P.DevtoolsEvent.DEVTOOLS_HANDSHAKE,{url:`http://localhost:${5001}`}),e.on("close",()=>{e.terminate()})}),process.on("SIGTERM",()=>{t.close(()=>{})}),t};var Ge=require("lodash"),Be=require("@refinedev/devtools-shared"),Ye=require("ws"),C=()=>0;var f=require("chalk"),N=t=>{let e=t.listen(5001,()=>{}).on("error",r=>{(r==null?void 0:r.code)==="EADDRINUSE"?console.error(`
${f.cyanBright.bold("\u2717 ")}${(0,f.bold)("refine devtools")} failed to start. Port ${5001} is already in use, please make sure no other devtools server is running
`):console.error(`
${f.cyanBright.bold("\u2717 ")}${(0,f.bold)("error from refine devtools")}`,r),process.exit(1)}).on("listening",()=>{console.log(`
${f.cyanBright.bold("\u2713 ")}${(0,f.bold)("refine devtools")} is running at port ${f.cyanBright.bold(5001)}
`)});process.on("SIGTERM",()=>{e.close(()=>{})})};var Oe={connectedApp:null,clientWs:null,devtoolsWsClients:[],appWsClients:[],activities:[],packages:[]},V=()=>({...Oe});var de=require("express"),pe=l(require("lodash/uniq"));var F=l(require("node-fetch")),U=l(require("gray-matter")),h=require("marked"),y=l(require("sanitize-html"));var Se=t=>t.split("---section").slice(1).map(r=>`---section${r}`),Ie=t=>{let e=new h.marked.Renderer;e.link=function(...n){return h.marked.Renderer.prototype.link.apply(this,n).replace(/^<a/,'<a target="_blank" rel="noopener noreferrer"')};let r=(0,h.marked)(t,{renderer:e});return(0,y.default)(r,{allowedTags:y.default.defaults.allowedTags.concat(["img"]),allowedAttributes:{...y.default.defaults.allowedAttributes,img:["src"]}})},xe=t=>{let e=(0,U.default)(t.replace("---section","---"));return{...e.data,content:Ie(e.content)}},De=async()=>{try{return(await(0,F.default)(D)).text()}catch{return""}},$=async()=>{try{let t=await De();return Se(t).map(xe)}catch{return[]}};var J=l(require("fs"));var H=l(require("path")),M=l(require("globby")),W=async t=>{try{let e=await(0,M.default)(`node_modules/${t}/package.json`,{onlyFiles:!0}),r=null;try{let n=require.resolve(H.default.join(t,"package.json"));n&&(r=n)}catch{}return[...e,...r?[r]:[]][0]??null}catch{return null}};var G=async t=>{try{let e=await W(t);if(!e)return null;let r=JSON.parse(J.default.readFileSync(e,{encoding:"utf-8"}));return{name:r.name,version:r.version,description:r.description}}catch{return null}};var q=l(require("path")),B=require("fs-extra"),_=async(t=process.cwd())=>{let e=await(0,B.readJSON)(q.default.join(t,"package.json"),{encoding:"utf-8"});return Object.keys(e.dependencies).filter(n=>n.startsWith("@refinedev/"))};var K=t=>t.replace("@refinedev/","https://c.refine.dev/");var Q=t=>"https://refine.dev/docs/api-reference/general-concepts/";var Y=async t=>{try{let e=await _(t);return await Promise.all(e.map(async n=>{let o=await G(n);return{name:n,currentVersion:o==null?void 0:o.version,description:o==null?void 0:o.description,changelog:K(n),documentation:Q(n)}}))}catch{return[]}};var p=l(require("dedent"));var Le=[{name:"@refinedev/ably",description:"Ably integration for refine",install:"npm install @refinedev/ably",usage:(0,p.default)(`
            import { liveProvider, Ably } from "@refinedev/ably";

            export const ablyClient = new Ably.Realtime("YOUR_API_TOKEN");

            const App = () => {
                return (
                    <Refine
                        liveProvider={liveProvider(ablyClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
        `.trim())},{name:"@refinedev/airtable",description:"Airtable integration for refine",install:"npm install @refinedev/airtable",usage:(0,p.default)(`
            import dataProvider from "@refinedev/airtable";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_KEY", "BASE_ID")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/antd",description:"Ant Design integration for refine",install:"npm install @refinedev/antd antd",usage:(0,p.default)(`
            import { ThemedLayoutV2 } from "@refinedev/antd";

            import "@refinedev/antd/dist/reset.css";

            const App = () => {
                return (
                    <Refine
                        /* ... */
                    >
                        <ThemedLayoutV2>
                            {/* ... */}
                        </ThemedLayoutV2>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/appwrite",description:"Appwrite integration for refine",install:"npm install @refinedev/appwrite",usage:(0,p.default)(`
            import { dataProvider, liveProvider, Account, Appwrite, Storage } from "@refinedev/appwrite";

            const appwriteClient = new Appwrite();
            appwriteClient.setEndpoint("API_URL").setProject("PROJECT_ID");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(appwriteClient, { databaseId: "default" })}
                        liveProvider={liveProvider(appwriteClient, { databaseId: "default" })}
                        /* ... */
                    >
                        <ThemedLayout>
                            {/* ... */}
                        </ThemedLayout>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/chakra-ui",description:"Chakra UI integration for refine",install:"npm install @refinedev/chakra-ui @chakra-ui/react @emotion/react @emotion/styled framer-motion",usage:(0,p.default)(`
            import { ThemedLayoutV2 } from "@refinedev/chakra-ui";
            import { ChakraProvider } from "@chakra-ui/react";

            const App = () => {
                return (
                        <ChakraProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ChakraProvider>
                );
            };
            `.trim())},{name:"@refinedev/graphql",description:"GraphQL integration for refine",install:"npm install @refinedev/graphql",usage:(0,p.default)(`
            import dataProvider, { GraphQLClient } from "@refinedev/graphql";

            const client = new GraphQLClient("YOUR_API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/hasura",description:"GraphQL integration for refine",install:"npm install @refinedev/hasura",usage:(0,p.default)(`
            import dataProvider, { GraphQLClient } from "@refinedev/hasura";

            const client = new GraphQLClient("HASURA_API_URL", {
                headers: {
                    "x-hasura-role": "public",
                },
            });

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/inferencer",description:"Auto generate views based on your APIs with refine",install:"npm install @refinedev/inferencer",usage:(0,p.default)(`
        import { AntdInferencer } from "@refinedev/inferencer/antd";

        const App = () => {
            return (
                <Refine
                    /* ... */
                >
                    <AntdInferencer action="list" resource="posts" />
                </Refine>
            );
        };
        `.trim())},{name:"@refinedev/kbar",description:"Command palette integration with kbar for refine",install:"npm install @refinedev/kbar",usage:(0,p.default)(`
            import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";

            const App = () => {
                return (
                    <RefineKbarProvider>
                        <Refine
                            /* ... */
                        >
                            <RefineKbar />
                        </Refine>
                    </RefineKbarProvider>
                );
            };
        `.trim())},{name:"@refinedev/mantine",description:"Mantine UI integration for refine",install:"npm install @refinedev/mantine @refinedev/react-table @mantine/core @mantine/hooks @mantine/form @mantine/notifications @emotion/react @tabler/icons",usage:(0,p.default)(`
            import { ThemedLayoutV2 } from "@refinedev/mantine";
            import { MantineProvider } from "@mantine/core";

            const App = () => {
                return (
                    <MantineProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </MantineProvider>
                );
            };
            `.trim())},{name:"@refinedev/medusa",description:"Medusa store integration for refine",install:"npm install @refinedev/medusa",usage:(0,p.default)(`
            import dataProvider, { authProvider } from "@refinedev/medusa";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        authProvider={authProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/mui",description:"Material UI integration for refine",install:"npm install @refinedev/mui @refinedev/react-hook-form @mui/material @mui/lab @mui/x-data-grid @emotion/react @emotion/styled react-hook-form",usage:(0,p.default)(`
            import { ThemedLayoutV2 } from "@refinedev/mui";

            import CssBaseline from "@mui/material/CssBaseline";
            import GlobalStyles from "@mui/material/GlobalStyles";
            import { ThemeProvider } from "@mui/material/styles";

            const App = () => {
                return (
                    <ThemeProvider>
                        <CssBaseline />
                        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ThemeProvider>
                );
            };
            `.trim())},{name:"@refinedev/nestjs-query",description:"NestJS Query data provider integration for refine",install:"npm install @refinedev/nestjs-query graphql-ws",usage:(0,p.default)(`
            import dataProvider, {
                GraphQLClient,
                liveProvider,
            } from "@refinedev/nestjs-query";

            import { createClient } from "graphql-ws";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(new GraphQLClient( "API_URL" ))}
                        liveProvider={liveProvider(createClient({ url: "WS_URL" }))}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/nestjsx-crud",description:"NestJSX CRUD data provider integration for refine",install:"npm install @refinedev/nestjsx-crud",usage:(0,p.default)(`
            import dataProvider from "@refinedev/nestjsx-crud";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/react-hook-form",description:"React Hook Form integration for refine",install:"npm install @refinedev/react-hook-form react-hook-form",usage:(0,p.default)(`
            import { useForm } from "@refinedev/react-hook-form";

            const EditPost = () => {
                const {
                    register,
                    handleSubmit,
                    formState,
                    refineCore,
                } = useForm({
                    refineCoreProps: {
                        resource: "posts",
                        id: "1",
                    },
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/react-table",description:"Tanstack React Table integration for refine",install:"npm install @refinedev/react-table @tanstack/react-table",usage:(0,p.default)(`
            import { useTable } from "@refinedev/react-table";

            import { ColumnDef, flexRender } from "@tanstack/react-table";

            const EditPost = () => {
                const columns = React.useMemo<ColumnDef<IPost>[]>(
                    () => [
                        {
                            id: "id",
                            header: "ID",
                            accessorKey: "id",
                        },
                        {
                            id: "title",
                            header: "Title",
                            accessorKey: "title",
                            meta: {
                                filterOperator: "contains",
                            },
                        },
                ], []);

                const tableInstance = useTable({
                    columns,
                    refineCoreProps: {
                        resource: "posts",
                    }
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/simple-rest",description:"Data provider integration for REST APIs with refine",install:"npm install @refinedev/simple-rest",usage:(0,p.default)(`
            import dataProvider from "@refinedev/simple-rest";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/supabase",description:"Data provider and live provider integrations for Supabase with refine",install:"npm install @refinedev/supabase",usage:(0,p.default)(`
            import { dataProvider, liveProvider, createClient } from "@refinedev/supabase";

            const supabaseClient = createClient("SUPABASE_URL", "SUPABASE_KEY");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(supabaseClient)}
                        liveProvider={liveProvider(supabaseClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi",description:"Strapi integration of refine",install:"npm install @refinedev/strapi axios",usage:(0,p.default)(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi-v4",description:"StrapiV4 integration of refine",install:"npm install @refinedev/strapi-v4 axios",usage:(0,p.default)(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi-v4";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())}],z=async t=>{let e=await _(t);return Le.filter(r=>!e.includes(r.name))};var X=l(require("preferred-pm")),Z=l(require("execa")),ee=async(t,e=process.cwd())=>{try{let{name:r}=await(0,X.default)(e)??{name:"npm"},{failed:n}=await(0,Z.default)(r??"npm",["install",...t.map(o=>`${o}@latest`)]);return!n}catch{return!1}};var te=l(require("execa")),re=async t=>{try{let{stdout:e}=await(0,te.default)("npm",["view",t,"name","version","--json"]);return JSON.parse(e)}catch{return{name:t}}};var ne=require("fs-extra"),ie=l(require("path")),E=async(t=process.cwd())=>{var e;try{let r=await(0,ne.readJSON)(ie.default.join(t,"package.json"),{encoding:"utf-8"}),n=(e=r==null?void 0:r.refine)==null?void 0:e.projectId;return n||!1}catch{return null}};var oe=l(require("execa")),ae=async(t,e=process.cwd())=>{try{return oe.default.sync("npm",["pkg","set",`refine.projectId=${t}`],{cwd:e}),!0}catch{return null}};var se=l(require("execa")),T=l(require("path")),ce=async(t,e=process.cwd())=>{try{let r=require.resolve(".bin/jscodeshift"),n=se.default.sync(r,["./","--extensions=ts,tsx,js,jsx","--parser=tsx",`--transform=${T.default.resolve(T.default.join(__dirname,"..","src","project-id","transform.ts"))}`,"--ignore-pattern=**/.cache/**","--ignore-pattern=**/node_modules/**","--ignore-pattern=**/build/**","--ignore-pattern=**/dist/**","--ignore-pattern=**/.next/**",`--__projectId=${t}`],{cwd:e,timeout:1e3*10});n.stderr&&console.error(n.stderr)}catch(r){console.error(r)}};var le=async(t,e=process.cwd())=>{try{return await Promise.all([ae(t,e),ce(t,e)]),!0}catch{return!1}};var me=(t,e)=>{t.use("/api",(0,de.json)()),t.get("/api/connected-app",(s,i)=>{i.json({url:e.connectedApp})}),t.get("/api/activities",(s,i)=>{let{offset:c=0,limit:m=e.activities.length}=s.query;i.setHeader("x-total-count",e.activities.length),i.json({data:e.activities.slice(Number(c),Number(m))})}),t.get("/api/activities/reset",(s,i)=>{e.activities=[],i.json({success:!0})}),t.get("/api/unique-trace-items",(s,i)=>{i.header("Access-Control-Allow-Origin","*"),i.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");let c=e.activities.flatMap(ye=>{var O;return((O=ye.trace)==null?void 0:O.map(_e=>_e.function).filter(Boolean))??[]}),m=(0,pe.default)(c);i.setHeader("x-total-count",m.length),i.json({data:m})});let r=null;t.get("/api/installed-packages",async(s,i)=>{let{force:c}=s.query??{};(!r||c)&&(r=await Y()),i.header("x-total-count",`${r.length}`),i.json({data:r})});let n=null;t.get("/api/available-packages",async(s,i)=>{n||(n=await z()),i.header("x-total-count",`${n.length}`),i.json({data:n})});let o=new Map;t.get("/api/packages/:packageName/latest",async(s,i)=>{let{packageName:c}=s.params??{};if(!c){i.status(400).json({error:"Package name is required"});return}if(!o.has(c)){let m=await re(c);o.set(c,m)}return i.json({data:o.get(c)})}),t.post("/api/packages/install",async(s,i)=>{let{packages:c}=s.body??{};if((c==null?void 0:c.length)===0){i.status(400).json({error:"Package name is required"});return}await ee(c)?(r=null,n=null,i.status(200).json({success:!0})):i.status(400).json({success:!1,error:"Failed to update package"})});let a=null;t.get("/api/feed",async(s,i)=>{a||(a=await $()),i.header("x-total-count",`${a.length}`),i.json({data:a})}),t.get("/api/project-id/status",async(s,i)=>{let c=await E();if(c){i.status(200).json({projectId:c});return}if(c===!1){i.status(404).json({projectId:null});return}i.status(500).json({projectId:null})}),t.post("/api/project-id/update",async(s,i)=>{let{projectId:c}=s.body??{};if(!c){i.status(400).json({error:"Project ID is required"});return}if(await le(c)){i.status(200).json({success:!0});return}i.status(500).json({success:!1,error:"Failed to update project ID"})})};var R=require("fs-extra"),fe=require("@ory/client"),w=require("http-proxy-middleware"),b=l(require("path"));var A=null,je=async(t,e,r)=>{A||(A=await E()),A&&(t.headers["x-project-id"]=A),r()},Ce=(t,e)=>{if(e.body){let r=JSON.stringify(e.body);t.setHeader("Content-Type","application/json"),t.setHeader("Content-Length",Buffer.byteLength(r)),t.write(r)}},Ne=async t=>{try{let e=`${g}/.auth`,r=new fe.FrontendApi({isJsonMime:()=>!0,basePath:e,baseOptions:{withCredentials:!0}}),{data:n}=await r.toSession({xSessionToken:t,tokenizeAs:"jwt_template_1"});return n==null?void 0:n.tokenized}catch{}},Ve=async(t,e)=>{try{(0,R.writeJSON)(b.default.join(__dirname,"..",".persist.json"),{token:t,jwt:e})}catch{}},Fe=async()=>{try{return await(0,R.readJSON)(b.default.join(__dirname,"..",".persist.json"))}catch{}return{token:void 0,jwt:void 0}},Ue=t=>(e,r)=>{if(r.url.includes("self-service/logout/api")){let n=JSON.stringify({session_token:t});e.setHeader("Content-Length",Buffer.byteLength(n)),e.write(n)}},$e=t=>(e,r,n)=>{let o="";e.on("data",a=>{o+=a}),e.on("end",()=>{var s;let a;try{a=JSON.parse(o).session_token}catch{}if(!a){if((s=o==null?void 0:o.includes)!=null&&s.call(o,"an+account+with+the+same+identifier")){n.redirect("/after-login?error=An+account+with+the+same+identifier+exists+already");return}n.redirect("/after-login?error=Invalid-session-token");return}Ne(a).then(i=>{t(a,i??""),n.redirect("/after-login")})})},ue=async t=>{let{token:e,jwt:r}=await Fe(),n=(0,w.createProxyMiddleware)({target:g,changeOrigin:!0,pathRewrite:{"^/api/.auth":"/.auth"},cookieDomainRewrite:{"refine.dev":""},logLevel:"silent",headers:{"auth-base-url-rewrite":`http://localhost:${5001}/api/.auth`},selfHandleResponse:!0,onProxyReq:(a,s,...i)=>{e&&(a.setHeader("X-Session-Token",e??""),Ue(e)(a,s,...i))},onProxyRes:(a,s,i)=>{if(s.url.includes("self-service/methods/oidc/callback"))return $e((c,m)=>{e=c,r=m,Ve(e,r)})(a,s,i);i.writeHead(a.statusCode||500,a.headers),a.pipe(i,{end:!0})}});t.use("/api/.auth",n);let o=(0,w.createProxyMiddleware)({target:g,secure:!1,changeOrigin:!0,logLevel:"silent",pathRewrite:{"^/api/.refine":"/.refine"},onProxyReq:(a,...s)=>{r&&(a.setHeader("Authorization",`Bearer ${r}`),a.removeHeader("cookie")),Ce(a,...s)}});t.use("/api/.refine",je,o)};var ve=l(require("path")),ge=(t,e)=>{t.get("/open-in-editor/*",(r,n)=>{let{line:o,column:a}=r.query,s=r.path.replace("/open-in-editor",""),i=`vscode://file/${ve.default.join(e,s)}?${o?`line=${o}`:""}${a?`&column=${a}`:""}`;n.redirect(i)})};var he=async({projectPath:t=process.cwd()}={})=>{let e=(0,Pe.default)(),r=j(),n=V();r.on("connection",o=>{(0,d.receive)(o,d.DevtoolsEvent.DEVTOOLS_INIT,a=>{n.connectedApp?(0,d.send)(o,d.DevtoolsEvent.DEVTOOLS_ALREADY_CONNECTED,{url:n.connectedApp}):(n.connectedApp=a.url,n.clientWs=o,r.clients.forEach(s=>{(0,d.send)(s,d.DevtoolsEvent.DEVTOOLS_CONNECTED_APP,{url:n.connectedApp})}))}),(0,d.receive)(o,d.DevtoolsEvent.ACTIVITY,a=>{let s=n.activities.findIndex(c=>c.identifier===a.identifier),i={...a,createdAt:Date.now(),updatedAt:Date.now()};s>-1?(i.createdAt=n.activities[s].createdAt,n.activities[s]=i):n.activities.push(i),r.clients.forEach(c=>{(0,d.send)(c,d.DevtoolsEvent.DEVTOOLS_ACTIVITY_UPDATE,{updatedActivities:[i]})})}),(0,d.receive)(o,d.DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR,({name:a})=>{r.clients.forEach(s=>{(0,d.send)(s,d.DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION,{name:a})})}),(0,d.receive)(o,d.DevtoolsEvent.DEVTOOLS_LOGIN_SUCCESS,()=>{r.clients.forEach(a=>{(0,d.send)(a,d.DevtoolsEvent.DEVTOOLS_RELOAD_AFTER_LOGIN,{})})}),o.on("close",(a,s)=>{n.clientWs&&(r.clients.has(n.clientWs)||(n.clientWs=null,n.connectedApp=null,n.activities=[],r.clients.forEach(i=>{(0,d.send)(i,d.DevtoolsEvent.DEVTOOLS_DISCONNECTED_APP,{url:n.connectedApp})})))})}),C(r),x(e),N(e),me(e,n),ue(e),ge(e,t)};he();
//# sourceMappingURL=cli.js.map