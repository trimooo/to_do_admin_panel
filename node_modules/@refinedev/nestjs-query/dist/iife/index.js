(()=>{var Y=Object.create;var V=Object.defineProperty;var Z=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var ee=Object.getPrototypeOf,re=Object.prototype.hasOwnProperty;var q=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(t,i)=>(typeof require<"u"?require:t)[i]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});var te=(r,t,i,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of m(t))!re.call(r,s)&&s!==i&&V(r,s,{get:()=>t[s],enumerable:!(e=Z(t,s))||e.enumerable});return r};var C=(r,t,i)=>(i=r!=null?Y(ee(r)):{},te(t||!r||!r.__esModule?V(i,"default",{value:r,enumerable:!0}):i,r));var f=C(q("camelcase")),v=C(q("gql-query-builder")),M=C(q("graphql-tag")),g=q("pluralize");var h=C(q("camelcase")),A=C(q("gql-query-builder")),P=C(q("lodash/set")),$=q("pluralize");var E=q("graphql"),se=r=>{var t,i;return(i=(t=r==null?void 0:r.selectionSet)==null?void 0:t.selections)==null?void 0:i.find(e=>e.kind==="Field"&&e.name.value==="nodes")},N=r=>{let t=[],i=!0,e=0,s=!1;return(0,E.visit)(r,{Field:{enter(n){if(i){i=!1;let o=se(n)??n;if(typeof o.selectionSet>"u")throw new Error("Operation must have a selection set");return o.selectionSet}t.push(`${e>0?"  ".repeat(s?e:e-1):""}${n.name.value}${n.selectionSet?" {":""}`),n.selectionSet&&(e++,s=!0)},leave(n){n.selectionSet&&(e--,t.push(`${"  ".repeat(e)}}`),s=!1)}}}),t.join(`
`).trim()},T=r=>{let t=!1;return(0,E.visit)(r,{OperationDefinition:{enter(i){i.operation==="mutation"&&(t=!0)}}}),t};var k=(r,{callback:t,params:i,meta:e},s)=>{let n={created:oe,updated:ae,deleted:ue},{resource:a,filters:o,subscriptionType:u,id:l,ids:c}=i??{},d=n[s],{operation:p,query:y,variables:w,operationName:b}=d({ids:c,id:l,resource:a,filters:o,meta:e,subscriptionType:u}),F=X=>{t(X.data[p])};return r.subscribe({query:y,variables:w,operationName:b},{next:F,error:console.error,complete:()=>null})},ie={eq:"eq",ne:"neq",lt:"lt",gt:"gt",lte:"lte",gte:"gte",in:"in",nin:"notIn"},ne=(r,t)=>{if(r==="contains")return{iLike:`%${t}%`};if(r==="ncontains")return{notILike:`%${t}%`};if(r==="startswith")return{iLike:`${t}%`};if(r==="nstartswith")return{notILike:`${t}%`};if(r==="endswith")return{iLike:`%${t}`};if(r==="nendswith")return{notILike:`%${t}`};if(r==="null")return{is:null};if(r==="nnull")return{isNot:null};if(r==="between"){if(!Array.isArray(t))throw new Error("Between operator requires an array");return t.length!==2?{}:{between:{lower:t[0],upper:t[1]}}}return{[ie[r]]:t}},R=r=>{let t={};return r.filter(i=>Array.isArray(i.value)&&i.value.length===0?!1:!!i.value).map(i=>i.operator==="and"||i.operator==="or"?(0,P.default)(t,i.operator,[R(i.value)]):"field"in i?(0,P.default)(t,i.field,ne(i.operator,i.value)):{}),t},I=r=>r.map(t=>({field:t.field,direction:t.order.toUpperCase()})),U=r=>{if(r.mode==="off")return{limit:2147483647};if(r.mode==="server"&&!(!r.current||!r.pageSize))return{limit:r.pageSize,offset:(r.current-1)*r.pageSize}},oe=({resource:r,filters:t,meta:i})=>{let e=(i==null?void 0:i.gqlQuery)??(i==null?void 0:i.gqlMutation);if(e){let u=(0,h.default)((0,$.singular)(r),{pascalCase:!0}),l=`Created${u}`,c=`created${u}`,d=`
            subscription ${l}($input: Create${u}SubscriptionFilterInput) {
                ${c}(input: $input) {
                    ${N(e)}
                }
            }
        `,p={};return t&&(p.input={filter:R(t.filter(y=>!y.field.includes(".")))}),{query:d,variables:p,operation:c,operationName:l}}let s=`created${(0,h.default)((0,$.singular)(r),{pascalCase:!0})}`,n={};t&&(n.input={type:(0,h.default)(`create_${(0,$.singular)(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:R(t.filter(u=>!u.field.includes(".")))}});let{query:a,variables:o}=A.subscription({operation:s,fields:i.fields,variables:n});return{query:a,variables:o,operation:s}},ae=({id:r,resource:t,filters:i,meta:e})=>{let s=(e==null?void 0:e.gqlQuery)??(e==null?void 0:e.gqlMutation);if(s){let l=(0,h.default)((0,$.singular)(t),{pascalCase:!0}),c=`Updated${l}`,d=`updatedOne${l}`,p=`
            subscription ${c}($input: UpdateOne${l}SubscriptionFilterInput) {
                ${d}(input: $input) {
                   ${N(s)}
                }
            }
        `,y={};return i&&(y.input={filter:R(i.filter(w=>!w.field.includes(".")))}),r&&(y.input={filter:{id:{eq:r}}}),{query:p,variables:y,operation:d,operationName:c}}let n=`updatedOne${(0,h.default)((0,$.singular)(t),{pascalCase:!0})}`,a={};i&&(a.input={type:(0,h.default)(`update_one_${(0,$.singular)(t)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:R(i.filter(l=>!l.field.includes(".")))}}),r&&(a.input={type:(0,h.default)(`update_one_${(0,$.singular)(t)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:{id:{eq:r}}}});let{query:o,variables:u}=A.subscription({operation:n,fields:e.fields,variables:a});return{query:o,variables:u,operation:n}},ue=({resource:r,filters:t,meta:i})=>{if(i!=null&&i.gqlQuery){let o=(0,h.default)((0,$.singular)(r),{pascalCase:!0}),u=`Deleted${o}`,l=`deletedOne${o}`,c=`
            subscription ${u}($input: DeleteOne${o}SubscriptionFilterInput) {
                ${l}(input: $input) {
                    id
                }
            }
        `,d={};return t&&(d.input={filter:R(t.filter(p=>!p.field.includes(".")))}),{query:c,variables:d,operation:l,operationName:u}}let e=`deletedOne${(0,h.default)((0,$.singular)(r),{pascalCase:!0})}`,s={};t&&(s.input={type:(0,h.default)(`delete_one_${(0,$.singular)(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:R(t.filter(o=>!o.field.includes(".")))}});let{query:n,variables:a}=A.subscription({operation:e,fields:i.fields.filter(o=>typeof o!="object"),variables:s});return{query:n,variables:a,operation:e}};var le=r=>({getList:async({resource:t,pagination:i,sorters:e,filters:s,meta:n})=>{let a=(0,f.default)(t),o=U(i||{}),u={},l,c;if(n!=null&&n.gqlQuery)l=n==null?void 0:n.gqlQuery,c={filter:s?R(s):{},sorting:e?I(e):[],paging:o};else{s&&(u.filter={type:(0,f.default)(`${(0,g.singular)(t)}Filter`,{pascalCase:!0}),required:!0,value:R(s)}),e&&(u.sorting={type:(0,f.default)(`${(0,g.singular)(t)}Sort`,{pascalCase:!0}),required:!0,list:[!0],value:I(e)}),o&&(u.paging={type:"OffsetPaging",required:!0,value:o});let p=v.query({operation:a,fields:[{nodes:n==null?void 0:n.fields},"totalCount"],variables:u});l=p.query,c=p.variables}let d=await r.request(l,c);return{data:d[a].nodes,total:d[a].totalCount}},getMany:async({resource:t,ids:i,meta:e})=>{let s=(0,f.default)(t);if(e!=null&&e.gqlQuery)return{data:(await r.request(e.gqlQuery,{filter:{id:{in:i}}}))[s].nodes};let{query:n,variables:a}=v.query({operation:s,fields:[{nodes:(e==null?void 0:e.fields)||["id"]}],variables:{filter:{type:(0,f.default)(`${(0,g.singular)(t)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:i}}}}});return{data:(await r.request(n,a))[s].nodes}},create:async({resource:t,variables:i,meta:e})=>{let s=`createOne${(0,f.default)((0,g.singular)(t),{pascalCase:!0})}`,n=(e==null?void 0:e.gqlMutation)??(e==null?void 0:e.gqlQuery);if(n)return{data:(await r.request(n,{input:{[(0,f.default)((0,g.singular)(t))]:i}}))[s]};let{query:a,variables:o}=v.mutation({operation:s,fields:(e==null?void 0:e.fields)||["id"],variables:{input:{type:`CreateOne${(0,f.default)((0,g.singular)(t),{pascalCase:!0})}Input`,required:!0,value:{[(0,f.default)((0,g.singular)(t))]:i}}}});return{data:(await r.request(a,o))[s]}},createMany:async({resource:t,variables:i,meta:e})=>{let n=`createMany${(0,f.default)(t,{pascalCase:!0})}`,a=(e==null?void 0:e.gqlMutation)??(e==null?void 0:e.gqlQuery);if(a)return{data:(await r.request(a,{input:{[(0,f.default)(t)]:i}}))[n]};let{query:o,variables:u}=v.mutation({operation:n,fields:(e==null?void 0:e.fields)||["id"],variables:{input:{type:`CreateMany${(0,f.default)(t,{pascalCase:!0})}Input`,required:!0,value:{[(0,f.default)(t)]:i}}}});return{data:(await r.request(o,u))[n]}},update:async({resource:t,id:i,variables:e,meta:s})=>{let n=`updateOne${(0,f.default)((0,g.singular)(t),{pascalCase:!0})}`,a=(s==null?void 0:s.gqlMutation)??(s==null?void 0:s.gqlQuery);if(a)return{data:(await r.request(a,{input:{id:i,update:e}}))[n]};let{query:o,variables:u}=v.mutation({operation:n,fields:(s==null?void 0:s.fields)||["id"],variables:{input:{type:`UpdateOne${(0,f.default)((0,g.singular)(t),{pascalCase:!0})}Input`,required:!0,value:{id:i,update:e}}}});return{data:(await r.request(o,u))[n]}},updateMany:async({resource:t,ids:i,variables:e,meta:s})=>{let n=(0,f.default)(t,{pascalCase:!0}),a=`updateMany${n}`,o=M.default`
                mutation UpdateMany${n}($input: UpdateMany${n}Input!) {
                    ${a}(input: $input) {
                        updatedCount
                    }
                }
            `;await r.request(o,{input:{filter:{id:{in:i}},update:e}});let u=(0,f.default)(t),l,c;if(s!=null&&s.fields){let p=v.query({operation:u,fields:[{nodes:(s==null?void 0:s.fields)||["id"]}],variables:{filter:{type:(0,f.default)(`${(0,g.singular)(t)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:i}}}}});l=p.query,c=p.variables}else l=M.default`
                    query GetMany${n}($filter: ${(0,g.singular)(n)}Filter!) {
                        ${u}(filter: $filter) {
                            nodes {
                                id
                            }
                        }
                    }
                `,c={filter:{id:{in:i}}};return{data:(await r.request(l,c))[u].nodes}},getOne:async({resource:t,id:i,meta:e})=>{let s=(0,f.default)((0,g.singular)(t)),n=(e==null?void 0:e.gqlQuery)??(e==null?void 0:e.gqlMutation);if(n){let l=n,c={id:i};if(T(n)){let p=N(n);l=M.default`
                        query Get${(0,f.default)((0,g.singular)(t),{pascalCase:!0})}($id: ID!) {
                            ${s}(id: $id) {
                            ${p}
                            }
                        }
                    `}return{data:(await r.request(l,c))[s]}}let{query:a,variables:o}=v.query({operation:s,fields:(e==null?void 0:e.fields)||["id"],variables:{id:{type:"ID",required:!0,value:i}}});return{data:(await r.request(a,o))[s]}},deleteOne:async({resource:t,id:i,meta:e})=>{let s=(0,f.default)((0,g.singular)(t),{pascalCase:!0}),n=`deleteOne${s}`;if(e!=null&&e.gqlMutation)return{data:(await r.request(e.gqlMutation,{input:{id:i}}))[n]};let a=M.default`
                    mutation DeleteOne${s}($input: DeleteOne${s}Input!) {
                        ${n}(input: $input) {
                            id
                        }
                    }
                `;return{data:(await r.request(a,{input:{id:i}}))[n]}},deleteMany:async({resource:t,ids:i})=>{let e=(0,f.default)(t,{pascalCase:!0}),s=`deleteMany${e}`,n=M.default`
                mutation DeleteMany${e}($input: DeleteMany${e}Input!) {
                    ${s}(input: $input) {
                        deletedCount
                    }
                }
            `,a={input:{filter:{id:{in:i}}}};return await r.request(n,a),{data:[]}},getApiUrl:()=>{throw Error("Not implemented on refine-nestjs-query data provider.")},custom:async({url:t,method:i,headers:e,meta:s})=>{t&&r.setEndpoint(t),e&&r.setHeaders(e);let n=(s==null?void 0:s.gqlMutation)??(s==null?void 0:s.gqlQuery);if(n)return{data:await r.request(n,(s==null?void 0:s.variables)??{})};if(s!=null&&s.rawQuery)return{data:await r.request(s.rawQuery,s.variables)};if(s){if(s.operation){let a,o;if(i==="get"){let l=v.query({operation:s.operation,fields:s.fields,variables:s.variables});a=l.query,o=l.variables}else{let l=v.mutation({operation:s.operation,fields:s.fields,variables:s.variables});a=l.query,o=l.variables}return{data:(await r.request(a,o))[s.operation]}}throw Error("GraphQL operation name required.")}throw Error("GraphQL needs operation, fields and variables values in meta object.")}}),z=le;var Ne=r=>{let t=(i,e,s,n,a,o,u)=>{let l=k(i,{callback:e,params:s,meta:n},a);u.push(l)};return{subscribe({callback:i,params:e,meta:s}){let{resource:n,subscriptionType:a}=e??{};if(!s||!a||!n)throw new Error("[useSubscription]: `meta`, `subscriptionType` and `resource` are required in `params` for graphql subscriptions");let o=[];return(e==null?void 0:e.subscriptionType)==="useList"&&["created","updated","deleted"].forEach(l=>t(r,i,e,s,l,n,o)),(e==null?void 0:e.subscriptionType)==="useOne"&&t(r,i,e,s,"updated",n,o),()=>{o.forEach(l=>l())}},unsubscribe(i){i()}}};var je=C(q("gql-query-builder"));var W=C(q("./createRequestBody.js"),1),j=q("./defaultJsonSerializer.js"),Q=q("./helpers.js"),O=q("./parseArgs.js"),B=q("./resolveRequestDocument.js"),J=q("./types.js"),S=C(q("cross-fetch"),1),he=q("./graphql-ws.js"),K=q("./resolveRequestDocument.js");var x=r=>{let t={};return r&&(typeof Headers<"u"&&r instanceof Headers||S&&S.Headers&&r instanceof S.Headers?t=(0,Q.HeadersInstanceToPlainObject)(r):Array.isArray(r)?r.forEach(([i,e])=>{i&&e!==void 0&&(t[i]=e)}):t=r),t},G=r=>r.replace(/([\s,]|#[^\n\r]+)+/g," ").trim(),ce=r=>{if(!Array.isArray(r.query)){let e=r,s=[`query=${encodeURIComponent(G(e.query))}`];return r.variables&&s.push(`variables=${encodeURIComponent(e.jsonSerializer.stringify(e.variables))}`),e.operationName&&s.push(`operationName=${encodeURIComponent(e.operationName)}`),s.join("&")}if(typeof r.variables<"u"&&!Array.isArray(r.variables))throw new Error("Cannot create query with given variable type, array expected");let t=r,i=r.query.reduce((e,s,n)=>(e.push({query:G(s),variables:t.variables?t.jsonSerializer.stringify(t.variables[n]):void 0}),e),[]);return`query=${encodeURIComponent(t.jsonSerializer.stringify(i))}`},pe=r=>async t=>{let{url:i,query:e,variables:s,operationName:n,fetch:a,fetchOptions:o,middleware:u}=t,l={...t.headers},c="",d;r==="POST"?(d=(0,W.default)(e,s,n,o.jsonSerializer),typeof d=="string"&&(l["Content-Type"]="application/json")):c=ce({query:e,variables:s,operationName:n,jsonSerializer:o.jsonSerializer??j.defaultJsonSerializer});let p={method:r,headers:l,body:d,...o},y=i,w=p;if(u){let b=await Promise.resolve(u({...p,url:i,operationName:n,variables:s})),{url:F,...H}=b;y=F,w=H}return c&&(y=`${y}?${c}`),await a(y,w)},L=class{constructor(t,i={}){this.url=t,this.requestConfig=i,this.rawRequest=async(...e)=>{let[s,n,a]=e,o=(0,O.parseRawRequestArgs)(s,n,a),{headers:u,fetch:l=S.default,method:c="POST",requestMiddleware:d,responseMiddleware:p,...y}=this.requestConfig,{url:w}=this;o.signal!==void 0&&(y.signal=o.signal);let{operationName:b}=(0,B.resolveRequestDocument)(o.query);return D({url:w,query:o.query,variables:o.variables,headers:{...x(_(u)),...x(o.requestHeaders)},operationName:b,fetch:l,method:c,fetchOptions:y,middleware:d}).then(F=>(p&&p(F),F)).catch(F=>{throw p&&p(F),F})}}async request(t,...i){let[e,s]=i,n=(0,O.parseRequestArgs)(t,e,s),{headers:a,fetch:o=S.default,method:u="POST",requestMiddleware:l,responseMiddleware:c,...d}=this.requestConfig,{url:p}=this;n.signal!==void 0&&(d.signal=n.signal);let{query:y,operationName:w}=(0,B.resolveRequestDocument)(n.document);return D({url:p,query:y,variables:n.variables,headers:{...x(_(a)),...x(n.requestHeaders)},operationName:w,fetch:o,method:u,fetchOptions:d,middleware:l}).then(b=>(c&&c(b),b.data)).catch(b=>{throw c&&c(b),b})}batchRequests(t,i){let e=(0,O.parseBatchRequestArgs)(t,i),{headers:s,...n}=this.requestConfig;e.signal!==void 0&&(n.signal=e.signal);let a=e.documents.map(({document:u})=>(0,B.resolveRequestDocument)(u).query),o=e.documents.map(({variables:u})=>u);return D({url:this.url,query:a,variables:o,headers:{...x(_(s)),...x(e.requestHeaders)},operationName:void 0,fetch:this.requestConfig.fetch??S.default,method:this.requestConfig.method||"POST",fetchOptions:n,middleware:this.requestConfig.requestMiddleware}).then(u=>(this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(u),u.data)).catch(u=>{throw this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(u),u})}setHeaders(t){return this.requestConfig.headers=t,this}setHeader(t,i){let{headers:e}=this.requestConfig;return e?e[t]=i:this.requestConfig.headers={[t]:i},this}setEndpoint(t){return this.url=t,this}},D=async r=>{let{query:t,variables:i,fetchOptions:e}=r,s=pe((0,Q.uppercase)(r.method??"post")),n=Array.isArray(r.query),a=await s(r),o=await ge(a,e.jsonSerializer??j.defaultJsonSerializer),u=Array.isArray(o)?!o.some(({data:c})=>!c):!!o.data,l=Array.isArray(o)||!o.errors||Array.isArray(o.errors)&&!o.errors.length||e.errorPolicy==="all"||e.errorPolicy==="ignore";if(a.ok&&l&&u){let{errors:c,...d}=(Array.isArray(o),o),p=e.errorPolicy==="ignore"?d:o;return{...n?{data:p}:p,headers:a.headers,status:a.status}}else{let c=typeof o=="string"?{error:o}:o;throw new J.ClientError({...c,status:a.status,headers:a.headers},{query:t,variables:i})}},de=async(...r)=>{let[t,i,...e]=r,s=(0,O.parseRawRequestExtendedArgs)(t,i,...e);return new L(s.url).rawRequest({...s})};async function fe(r,t,...i){let e=(0,O.parseRequestExtendedArgs)(r,t,...i);return new L(e.url).request({...e})}var qe=async(...r)=>{let t=ye(r);return new L(t.url).batchRequests(t)},ye=r=>r.length===1?r[0]:{url:r[0],documents:r[1],requestHeaders:r[2],signal:void 0};var ge=async(r,t)=>{let i;return r.headers.forEach((e,s)=>{s.toLowerCase()==="content-type"&&(i=e)}),i&&(i.toLowerCase().startsWith("application/json")||i.toLowerCase().startsWith("application/graphql+json")||i.toLowerCase().startsWith("application/graphql-response+json"))?t.parse(await r.text()):r.text()},_=r=>typeof r=="function"?r():r,be=(r,...t)=>r.reduce((i,e,s)=>`${i}${e}${s in t?t[s]:""}`,"");var Ve=C(q("graphql-ws")),Ee=z;})();
//# sourceMappingURL=index.js.map